<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows环境下搭建python开发环境</title>
      <link href="/2024-11-27-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BApython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html"/>
      <url>/2024-11-27-windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BApython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本篇文章主要用于帮助<strong>python萌新</strong>以及<strong>Windows系统的计算机萌新</strong>，解决<strong>搭建python开发环境</strong>时遇到的一些问题。由于我的计算机主系统是<strong>Ubuntu Linux</strong>，所以本篇文章主要在Windows虚拟机环境下进行操作。</p><h2 id="系统环境"><a class="markdownIt-Anchor" href="#系统环境"></a> 系统环境</h2><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">名称</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:center">虚拟机</td><td style="text-align:left">virtualbox</td><td style="text-align:left">7.0.20</td></tr><tr><td style="text-align:center">系统</td><td style="text-align:left">Windows 11</td><td style="text-align:left">24H2</td></tr></tbody></table><h2 id="基础windows系统电脑知识扫盲"><a class="markdownIt-Anchor" href="#基础windows系统电脑知识扫盲"></a> 基础windows系统电脑知识扫盲</h2><h3 id="浏览器"><a class="markdownIt-Anchor" href="#浏览器"></a> 浏览器</h3><p>Windows自带了Edge浏览器，默认安装位置在<code>C:\Program Files (x86)\Microsoft\Edge\Application</code>，翻译成常用语言就是: 在<strong>C盘</strong>的<strong>Program Files (x86)<strong>文件夹里的</strong>Microsoft</strong>文件夹里的<strong>Application</strong>文件夹里<br /><img src="/images/win_teach/edge_path.png" alt="Edge Path" /></p><p>正常情况下打开Edge浏览器后界面，是这样<br /><img src="/images/win_teach/open_edge.png" alt="Open Edge" /></p><p>如果你的edge设置得比较简洁也可能是这样<br /><img src="/images/win_teach/open_edge_clear.png" alt="Open Edge Clear" /></p><p>如果不是这样，请点击跳转到<a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%BB%E9%A1%B5%E8%A2%AB%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E7%AF%A1%E6%94%B9">浏览器主页被杀毒软件篡改</a></p><h3 id="浏览器的地址栏与搜索框"><a class="markdownIt-Anchor" href="#浏览器的地址栏与搜索框"></a> 浏览器的地址栏与搜索框</h3><p>那么我们先介绍一下浏览器常用的两个界面元素<strong>地址栏</strong>和<strong>搜索框</strong>，如图所示:<br /><img src="/images/win_teach/edge_explain.png" alt="Edge_Explain" /><br /><img src="/images/win_teach/edge_clear_explain.png" alt="Edge Clear_Explain" /></p><p>那么它们有什么用呢？</p><ul><li><p>地址栏：用于传入和显示网址，例如这篇博客的网址就是：<br /><a href="https://stalk-evolto.github.io/windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BApython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html">https://stalk-evolto.github.io/windows系统下搭建python开发环境.html</a><br />你可以通过在地址栏输入网址的方式，在浏览器上显示该地址下的数据。<br /><img src="/images/win_teach/search_path.png" alt="search_path" /></p></li><li><p>搜索框：传入关键词，使用搜索引擎进行搜索。<br />例如，<strong>Edge浏览器</strong>默认的搜索引擎是<strong>bing</strong>，那么我现在想搜索<strong>python</strong>，就可以<strong>在搜索框输入python后回车</strong>。经过短暂的等待后就能看到很多<strong>带有python关键字的网页</strong>被枚举出来，你也可以看到这个网页的网址。<strong>点击网页标题</strong>即可跳转显示该网页页面。<br /><img src="/images/win_teach/search1.png" alt="search" /><br /><img src="/images/win_teach/search2.png" alt="search" /></p></li></ul><p>知道这些就好，基于对电脑萌新的了解，你大概率不会从搜索引擎给你枚举的网页里分辨出python官网页面。在本篇文章中我会多使用地址栏，防止你进入钓鱼网站下载奇奇怪怪的东西。</p><h3 id="文件扩展名"><a class="markdownIt-Anchor" href="#文件扩展名"></a> 文件扩展名</h3><p>在Windows中，常用文件扩展名来标注文件格式。例如：<br />一个叫test的文本文件：test.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.txt</span><br><span class="line">文件名.拓展名</span><br></pre></td></tr></table></figure><ul><li><code>test</code>是文件名，用来告诉你这个文件叫什么。</li><li><code>txt</code>是文件拓展名，用来告诉你这个文件是以txt格式（文本格式）储存的。</li></ul><h4 id="如何查看文件拓展名"><a class="markdownIt-Anchor" href="#如何查看文件拓展名"></a> 如何查看文件拓展名</h4><p>Windows可以通过点击<strong>查看</strong>-<strong>显示</strong>-<strong>文件拓展名</strong>。<br /><img src="/images/win_teach/extension1.png" alt="extension" /><br /><img src="/images/win_teach/extension2.png" alt="extension" /></p><p>点击后你可以查看一下<strong>文件拓展名</strong>这一项是不是被打上了勾。<br /><img src="/images/win_teach/extension3.png" alt="extension" /></p><p>然后再看你的文件资源管理器，你的文件就显示对应的拓展名啦。<br /><img src="/images/win_teach/extension4.png" alt="extension" /></p><h1 id="安装python"><a class="markdownIt-Anchor" href="#安装python"></a> 安装python</h1><p>终于进入正题了，先聊聊python是什么？</p><p>在我看来，python就是我们与计算机对话的一种方式。<br />就像我们平时给别人安排工作，在中国你可以用普通话告诉对方要做什么、怎么做…因为<strong>我们都能听懂普通话</strong>，交流没有障碍。但是今天你需要给一个<strong>只会英文的英国技术员</strong>安排工作，但是<strong>你又不会英语</strong>，怎么办？<br />聪明的你很快就想到了，我去请个<strong>同时会中文和英文的人做翻译</strong>，找了很久终于找到了一个会英语说的不是很流利，但是单词翻译很准确的翻译。由于这个翻译对语法转变不是熟练，他给了你一本<strong>英语语法大全</strong>，希望你能够按照英语语法给他说中文，他就能帮你翻译成英文告知技术员…</p><p>说到这里，我们再来看看现实遇到的情况。<strong>我们会说活会打字</strong>，而<strong>电脑只能看得懂二进制数据</strong>(0和1)。现在我想要让电脑帮我办些事，直接打字电脑又看不懂，二进制数据我也看不懂，这时候我去找一了个翻译——<strong>python解释器</strong>，而python解释器又比较笨，需要我按照他给的格式打字才能帮我翻译我的话，我需要按照<strong>python文档</strong>里的格式把我想要做的事打出来，python解释器就能帮我翻译成二进制数据告诉电脑我想要他干什么…</p><p>哦~原来是这样!!那我现在需要电脑帮我干些活，我要怎么获得<strong>python解释器</strong>和<strong>python文档</strong>呢？</p><p>这些都可以在<strong>python官网</strong>得到啦,你需要打开<strong>Edge浏览器</strong>，在地址栏输入<strong>python官网</strong>的网址:</p><ul><li>python官网: <a href="https://www.python.org">https://www.python.org</a></li></ul><p><img src="/images/win_teach/search_python.png" alt="install_python" /></p><p>输入后回车即可跳转到python官网</p><h2 id="安装python解释器"><a class="markdownIt-Anchor" href="#安装python解释器"></a> 安装python解释器</h2><p>安装python解释器其实python官方文档里面写的很详细，只是对于初识电脑的你比较难懂。如果你对电脑有一定了解，可以自行查阅官方文档：</p><ul><li>在Windows下使用Python: <a href="https://docs.python.org/zh-cn/3.13/using/windows.html#using-python-on-windows">https://docs.python.org/zh-cn/3.13/using/windows.html#using-python-on-windows</a></li></ul><ol><li><p>首先需要查看自己的电脑cpu架构：<br />进入<strong>设置</strong>，点击<strong>系统</strong>-<strong>系统信息</strong>。<br />可以看出我的电脑cpu是64位架构的，现在系统是Win11。<br /><img src="/images/win_teach/install_python1.png" alt="install_python" /><br /><img src="/images/win_teach/install_python2.png" alt="install_python" /></p></li><li><p>回到python官网，依次点击<strong>Download</strong>-<strong>Windows</strong>，跳转到以下界面。<br />可以看到python有许多版本，我在这里选择python3.13的64bit版本做安装演示，点击后下载。<br /><img src="/images/win_teach/download_python1.png" alt="install_python" /><br /><img src="/images/win_teach/download_python2.png" alt="install_python" /></p></li><li><p>下载完成后，点击打开文件所在文件夹。<br /><img src="/images/win_teach/download_python3.png" alt="install_python" /></p></li><li><p>右键刚刚下载好的安装程序，点击以管理员身份运行。<br />在此我选择默认安装，需要勾选下面添加环境变量选项，如果忘记勾选，也可安装好后再添加。<br /><img src="/images/win_teach/install_python3.png" alt="install_python" /><br /><img src="/images/win_teach/install_python4.png" alt="install_python" /><br /><img src="/images/win_teach/install_python5.png" alt="install_python" /></p></li><li><p>稍等片刻后安装完毕，就可以按<strong>close</strong>关闭安装界面了。<br /><img src="/images/win_teach/install_python6.png" alt="install_python" /></p></li><li><p>我们测试一下是否安装成功。<br />同时按下win键和r键。（以后这类组合键我会表示成<strong>win + r</strong>）<br /><img src="/images/win_teach/keyboard.jpg" alt="keyboard" /></p></li></ol><p>在弹出的窗口中输入cmd，点击运行。<br /><img src="/images/win_teach/operation.png" alt="install_python" /></p><p>在弹出的终端窗口中输入<code>python</code>后回车，如果出现成功进入<strong>python shell</strong>即安装成功。<br /><img src="/images/win_teach/install_python7.png" alt="install_python" /><br /><img src="/images/win_teach/install_python8.png" alt="install_python" /></p><p>如果自动跳转到<strong>Microsoft Store</strong>，则需要关闭<a href="#%E5%85%B3%E9%97%ADpython%E7%9A%84%E5%BA%94%E7%94%A8%E6%89%A7%E8%A1%8C%E5%88%AB%E5%90%8D"><strong>python</strong>的<strong>应用执行别名</strong></a>。</p><ol start="7"><li>尝试显示python之禅。<br />在刚刚输入的python shell中输入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><p><img src="/images/win_teach/install_python9.png" alt="install_python" /></p><p>然后你的终端就会出现下列语句<br /><img src="/images/win_teach/install_python10.png" alt="install_python" /></p><p>翻译成中文就是：</p><blockquote><p>优美优于丑陋，<br />明了优于隐晦，<br />简单优于复杂，<br />复杂优于繁杂，<br />扁平优于嵌套，<br />稀疏优于稠密，<br />可读性很重要！<br />特例亦不可违背原则，<br />即使实用比纯粹更优。<br />错误绝不能悄悄忽略，<br />除非它明确需要如此。<br />面对不确定性，拒绝妄加猜测。<br />任何问题应有一种-- 且最好只有一种 --显而易见的解决方法。<br />尽管这方法一开始并非如此直观，除非你是荷兰人。<br />做优于不做，<br />然而不假思索还不如不做。<br />很难解释的，必然是坏方法。<br />很好解释的，可能是好方法。<br />命名空间是个绝妙的主意，我们应好好利用它。</p></blockquote><blockquote><p><strong>注：</strong> 翻译来源于维基百科。</p></blockquote><p>这时python开发者<strong>Tim Peters</strong>对<strong>python设计指导原则</strong>的归纳，也是对我们编写python程序时的一些建议。</p><p>如果你成功显示了<strong>python之禅</strong>，那么说明你的<strong>python解释器</strong>已经<strong>成功安装</strong>了。现在你可以输入<code>exit()</code>后回车退出python shell。<br /><img src="/images/win_teach/install_python11.png" alt="install_python" /></p><p>你可以在<strong>python官网</strong>查看<strong>python的文档</strong>：</p><ul><li>Python3.13文档: <a href="https://docs.python.org/zh-cn/3.13">https://docs.python.org/zh-cn/3.13</a></li></ul><h1 id="如何使用python"><a class="markdownIt-Anchor" href="#如何使用python"></a> 如何使用python</h1><p>你已经安装好了python解释器，也知道了python文档的网址，那么开始编写第一个python程序吧！！</p><h2 id="第一个python程序"><a class="markdownIt-Anchor" href="#第一个python程序"></a> 第一个python程序</h2><p>我将演示如何使用记事本编写一个python程序，它的功能是在终端中打印出<code>Hello World!!</code>字样。</p><h3 id="新建一个python项目目录可选"><a class="markdownIt-Anchor" href="#新建一个python项目目录可选"></a> 新建一个python项目目录（可选）</h3><p>在你电脑上一个你喜欢的地方新建一个文件夹，用于存放python程序源代码，例如我在<strong>D盘</strong>根目录创建一个叫<strong>program_python</strong>的文件夹</p><ol><li><p>新建文件夹<br /><img src="/images/win_teach/use_python1.png" alt="use_python" /></p></li><li><p>将文件夹重命名为program_python<br /><img src="/images/win_teach/use_python2.png" alt="use_python" /><br /><img src="/images/win_teach/use_python3.png" alt="use_python" /></p></li></ol><h3 id="创建python程序"><a class="markdownIt-Anchor" href="#创建python程序"></a> 创建python程序</h3><p>双击进入<strong>program_python</strong>文件夹，右键，点击<strong>新建</strong>-<strong>文本文档</strong>。<br /><img src="/images/win_teach/use_python4.png" alt="use_python" /></p><p>然后修改文件名为test，<a href="http://xn--siqu5ly1h61g.py">拓展名为.py</a>（<a href="http://xn--test-uh5fk9aodxmx9dq5sha8514bdkewrgp7ah07piv3d.py">以后我会直接说修改文件名为test.py</a>）<br /><img src="/images/win_teach/use_python5.png" alt="use_python" /><br /><img src="/images/win_teach/use_python6.png" alt="use_python" /></p><p><a href="http://xn--test-4g1g2865a.py">右键test.py</a>，点击<strong>打开方式</strong>，选择<strong>记事本</strong><br /><img src="/images/win_teach/use_python7.png" alt="use_python" /><br /><img src="/images/win_teach/use_python8.png" alt="use_python" /></p><p>打开后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/win_teach/use_python9.png" alt="use_python" /></p><p>点击<strong>文件</strong>-<strong>保存</strong>，然后点击右上角的叉叉关闭窗口。<br /><img src="/images/win_teach/use_python10.png" alt="use_python" /></p><p>右键此地空白处，点击在此打开终端。<br /><img src="/images/win_teach/use_python11.png" alt="use_python" /></p><p>再打开的终端里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><p><img src="/images/win_teach/use_python12.png" alt="use_python" /></p><p>结果：<br /><img src="/images/win_teach/use_python13.png" alt="use_python" /></p><p>成功显示就说明我们成功创建第一个pyhton程序啦。</p><h1 id="安装一个适合代码编写的编辑器"><a class="markdownIt-Anchor" href="#安装一个适合代码编写的编辑器"></a> 安装一个适合代码编写的编辑器</h1><p>从上一个例子，我们使用了记事本来编写代码。在编写少量代码时不会有什么问题，但是现代程序动不动就几百上千行，如果这个时候你再用记事本编辑，效果是这样的：<br /><img src="/images/win_teach/notepad.png" alt="notepade_code" /></p><p>那么怎么办呢？<br />我们可以安装一款适合代码编写的编辑器。</p><p>适合编写代码的编辑器有很多，例如Visual Studio Code（简称VS Code），Vim，Emacs，Notepad++…</p><p>有很多很多，我目前最常用的编辑器是Vim，别的编辑器了解不深。但是考虑到本篇文章受众在Windows环境下，所以学习了一下VS Code的安装配置。虽然我在这只介绍两种编辑器的安装，你也可以凭你个人喜好自行安装一款你喜欢的编辑器使用。</p><h2 id="visual-studio-code"><a class="markdownIt-Anchor" href="#visual-studio-code"></a> Visual Studio Code</h2><ul><li>VS Code的官方网站: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li></ul><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><h3 id="配置vs-code"><a class="markdownIt-Anchor" href="#配置vs-code"></a> 配置VS Code</h3><h3 id="使用vs-code编写第一个python程序"><a class="markdownIt-Anchor" href="#使用vs-code编写第一个python程序"></a> 使用VS Code编写第一个python程序</h3><h2 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> Vim</h2><ul><li>Vim的官方网站: <a href="https://www.vim.org/">https://www.vim.org/</a></li></ul><h3 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h3><h3 id="配置vim"><a class="markdownIt-Anchor" href="#配置vim"></a> 配置Vim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&quot;取消自动备份</span><br><span class="line">set nobackup</span><br><span class="line">set noundofile</span><br><span class="line">set noswapfile</span><br><span class="line">&quot;显示行号</span><br><span class="line">set number</span><br><span class="line">&quot;vim自动对齐，也就是把当前行的对齐格式应用到下一行</span><br><span class="line">set autoindent</span><br><span class="line">&quot;文本颜色显示</span><br><span class="line">syntax enable</span><br><span class="line">&quot;语法高亮显示</span><br><span class="line">syntax on</span><br><span class="line">&quot;根据上面对齐格式，智能选择对齐格式，类似C语言编程</span><br><span class="line">set smartindent</span><br><span class="line">&quot;设置&#x27;&gt;&#x27;操作符的缩进值为4，可使用&#x27;&gt;&gt;&#x27;为当前行提供缩进量</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot;设置tab按键为四个空格</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot;设置匹配模式，类似当输入一个左括号时会匹配一个右括号</span><br><span class="line">set showmatch</span><br><span class="line">&quot;高亮显示匹配项</span><br><span class="line">set hlsearch</span><br><span class="line">&quot;显示制表符</span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br><span class="line">&quot;设置中文帮助</span><br><span class="line">set helplang=cn</span><br><span class="line">&quot;限定行长至多80字符</span><br><span class="line">set textwidth=80</span><br><span class="line">&quot;窗口大小</span><br><span class="line">set lines=35 columns=140</span><br><span class="line">&quot;分割出来的窗口位于当前窗口下边/右边</span><br><span class="line">set splitbelow</span><br><span class="line">set splitright</span><br><span class="line">&quot;隐藏工具栏</span><br><span class="line">set guioptions-=T</span><br><span class="line">&quot;隐藏菜单栏</span><br><span class="line">set guioptions-=m</span><br><span class="line">&quot;隐藏左侧垂直滚动条</span><br><span class="line">set guioptions-=l</span><br><span class="line">&quot;隐藏右侧滚动条</span><br><span class="line">set guioptions-=r</span><br><span class="line">&quot;隐藏水平滚动条</span><br><span class="line">set guioptions-=b</span><br><span class="line">&quot;设置英文字体为Birsteam Vera Sans Mono</span><br><span class="line">set guifont=Cascadia_Mono:h14:cANSI</span><br><span class="line">&quot;设置中文字体 幼圆</span><br><span class="line">set gfw=幼圆:h14:cGB2312</span><br><span class="line">&quot;使用深色背景色配色</span><br><span class="line">set background=dark</span><br><span class="line">&quot;设置主题为wildcharm</span><br><span class="line">colorscheme wildcharm</span><br><span class="line">&quot;显示行尾空格</span><br><span class="line">highlight WhitespaceEOL ctermbg=red guibg=red</span><br><span class="line">match WhitespaceEol /\s\+$/</span><br><span class="line">&quot;启用自动缩进</span><br><span class="line">filetype indent on</span><br><span class="line">&quot;启用插件</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure><h3 id="使用vim编写第一个python程序"><a class="markdownIt-Anchor" href="#使用vim编写第一个python程序"></a> 使用Vim编写第一个python程序</h3><h1 id="疑难杂症汇总"><a class="markdownIt-Anchor" href="#疑难杂症汇总"></a> 疑难杂症汇总</h1><h2 id="浏览器主页被杀毒软件篡改"><a class="markdownIt-Anchor" href="#浏览器主页被杀毒软件篡改"></a> 浏览器主页被杀毒软件篡改</h2><p>如果你的<strong>Edge浏览器</strong>点进去主页是这样：<br /><img src="/images/win_teach/hijack1.png" alt="hijack" /><br /><img src="/images/win_teach/hijack2.png" alt="hijack" /><br /><img src="/images/win_teach/hijack3.png" alt="hijack" /><br /><img src="/images/win_teach/hijack4.png" alt="hijack" /></p><p>那说明你的<strong>Edge浏览器默认主页</strong>被篡改了，在萌新阶段大概率是你的<strong>杀毒软件</strong>开启了<strong>浏览器主页保护</strong>功能。下面列举几个常见的杀毒软件关闭主页保护的方法。</p><ul><li>360安全卫士</li><li>火绒安全</li><li>金山毒霸</li></ul><h3 id="360安全卫士"><a class="markdownIt-Anchor" href="#360安全卫士"></a> 360安全卫士</h3><ol><li>打开<strong>360安全卫士</strong>，看到如下界面：<br /><img src="/images/win_teach/360_one.png" alt="360_safe" /></li><li>点击<strong>功能大全</strong>，再点击<strong>搜索工具</strong>，搜索<strong>浏览器防护设置</strong>,点击后出现如下界面:<br /><img src="/images/win_teach/360_two.png" alt="360_safe" /></li><li>将3个<strong>已锁定</strong>的选项解锁，即可关闭360对Edge浏览器默认主页的篡改。<br /><img src="/images/win_teach/360_three.png" alt="360_safe" /></li></ol><h3 id="火绒安全"><a class="markdownIt-Anchor" href="#火绒安全"></a> 火绒安全</h3><ol><li>打开<strong>火绒安全</strong>，看到如下界面:<br /><img src="/images/win_teach/huorong1.png" alt="huorong" /></li><li>点击左下角的<strong>设置</strong>(红框框住的齿轮),会打开设置窗口:<br /><img src="/images/win_teach/huorong2.png" alt="huorong" /></li><li>点击<strong>系统防护</strong>，再点击<strong>浏览器防护</strong>，关闭<strong>浏览器防护的开关</strong>(红框框住的开关),即可关闭火绒安全对Edge浏览器默认主页的篡改。<br /><img src="/images/win_teach/huorong3.png" alt="huorong" /></li></ol><h3 id="金山毒霸"><a class="markdownIt-Anchor" href="#金山毒霸"></a> 金山毒霸</h3><ol><li>打开<strong>金山毒霸</strong>，看到如下界面:<br /><img src="/images/win_teach/jinshan1.png" alt="jinshan" /></li><li>点击右下角的<strong>百宝箱</strong>，进入到如下界面:<br /><img src="/images/win_teach/jinshan2.png" alt="jinshan" /></li><li>搜索<strong>浏览器保护</strong>，跳转到如下界面:<br /><img src="/images/win_teach/jinshan3.png" alt="jinshan" /></li><li>将红框框住的<strong>开关全部关闭</strong>，即可关闭金山毒霸对Edge浏览器主页的篡改。</li></ol><h2 id="关闭python的应用执行别名"><a class="markdownIt-Anchor" href="#关闭python的应用执行别名"></a> 关闭python的应用执行别名</h2><ol><li><p>进入<strong>设置</strong>，点击<strong>应用</strong>，再点击<strong>高级应用设置</strong><br /><img src="/images/win_teach/alias1.png" alt="change_alias" /></p></li><li><p>点击<strong>应用执行别名</strong><br /><img src="/images/win_teach/alias2.png" alt="change_alias" /></p></li><li><p>往下滑，找到图示红框内的两项<br /><img src="/images/win_teach/alias3.png" alt="change_alias" /></p></li><li><p>关闭掉这两项的开关<br /><img src="/images/win_teach/alias4.png" alt="change_alias" /></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> teach </category>
          
          <category> 教学文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literacy </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mariadb安装历程</title>
      <link href="/2024-11-05-mariadb%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%8E%86%E7%A8%8B.html"/>
      <url>/2024-11-05-mariadb%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%8E%86%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a class="markdownIt-Anchor" href="#package-version"></a> package version</h1><table><thead><tr><th style="text-align:center">package</th><th style="text-align:center">version</th></tr></thead><tbody><tr><td style="text-align:center">ubuntu</td><td style="text-align:center">24.10</td></tr><tr><td style="text-align:center">mariadb</td><td style="text-align:center">11.7.0</td></tr></tbody></table><h1 id="mariadb部署"><a class="markdownIt-Anchor" href="#mariadb部署"></a> mariadb部署</h1><h2 id="什么是mariadb"><a class="markdownIt-Anchor" href="#什么是mariadb"></a> 什么是mariadb</h2><p>引用维基百科的描述：</p><hr /><p>MariaDB是MySQL关系数据库管理系统的一个分叉，由社区开发，有商业支持，旨在继续保持在GNU GPL下开源。MariaDB的开发是由MySQL的一些原始开发者领导的，他们担心甲骨文公司收购MySQL后会有一些隐患。</p><hr /><p>mariadb官网网址: <a href="https://mariadb.com">https://mariadb.com</a></p><p>也就是说是一个开源的关系型数据库，那么什么是关系型数据库？<br /><s>好吧我也不太懂</s></p><p>那么可以用来干什么呢？</p><p>我现在有两组数据:<br />一组是储存一个直播间的主播的信息，一组储存的是直播间送礼物和发送弹幕信息。<br />不难发现：主播和直播间观众的联系是，主播有一个直播间，观众在这个直播间内。<s>至于观众是不是主播这层我还没考虑到</s></p><ol><li>我今天想删除某一个主播的信息，还要删除这个主播粉丝的在他直播间里发送的所有弹幕。但是一个主播有很多粉丝，每个粉丝会发送很多弹幕。一条一条查看删除的我：哦，我的老天，这是一个大工程。</li><li>我的电脑不止我一个人使用，我不想让别人看到和使用我储存的这些信息。创建一个新用户？~~假设是女朋友查你电脑里有没有好康的，~~我需要只让这些数据在除我之外的人需要费点劲才能查看到这些数据，还要再费点劲才能知道他们之间的关系，别的一切都不要有太多的变化。</li><li>我又比较懒，不想编写太多的程序实现这个功能。<br />那就装个现成的数据库吧!!!</li></ol><h2 id="mariadb安装"><a class="markdownIt-Anchor" href="#mariadb安装"></a> mariadb安装</h2><p>详情可以查看官方文档：<a href="https://mariadb.com/kb/en/getting-installing-and-upgrading-mariadb/">https://mariadb.com/kb/en/getting-installing-and-upgrading-mariadb/</a></p><p>我选择的是源代码编译。</p><h3 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h3><p>查看《ubuntu构建说明》：<a href="https://mariadb.com/kb/en/building-mariadb-on-ubuntu/">https://mariadb.com/kb/en/building-mariadb-on-ubuntu/</a></p><p>文档里安装的是10.3的构建依赖，我没有使用mariadb官方库，使用的ubuntu的库:<br /><s>毕竟去/etc/apt/sources.list.d路径下删不需要的源对我这种懒人来说有点心累。缺点是编译途中遇到没有安装的依赖就要自己安装了</s></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common devscripts equivs</span><br><span class="line">sudo apt-get build-dep mariadb</span><br></pre></td></tr></table></figure><p>如果出现以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: 您必须在 sources.list 中指定代码源（deb-src）URI</span><br></pre></td></tr></table></figure><p>说明你当前apt没有deb-src软件源<br />可以通过以下步骤添加：</p><ol><li>编辑apt源配置文件(两种选一种，看你电脑上是怎么设置的)</li></ol><ul><li>/etc/apt/source.list文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/source.list</span><br></pre></td></tr></table></figure><p>可以看到以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">deb</span> <span class="string">http://archive.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="string">deb</span> <span class="string">http://security.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br></pre></td></tr></table></figure><p>将这两行复制，并更改复制行的开头为deb-src,即：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">deb</span> <span class="string">http://archive.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="string">deb-src</span> <span class="string">http://archive.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="string">deb</span> <span class="string">http://security.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="string">deb-src</span> <span class="string">http://security.ubuntu.com/ubuntu</span> <span class="string">oracular</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br></pre></td></tr></table></figure><p>保存退出后（按Esc后输入:wq回车),在终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get build-dep mariadb</span><br></pre></td></tr></table></figure><p>就不会报错了</p><p>如果你的/etc/apt/source.list显示以下内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu sources have moved to /etc/apt/sources.list.d/ubuntu.sources</span><br></pre></td></tr></table></figure><p>则按照提示修改/etc/apt/sources.list.d/ubuntu.sources文件</p><ul><li>/etc/apt/source.list.d/ubuntu.source文件（deb822风格）<br />修改该文件:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/source.list.d/ubuntu.source</span><br></pre></td></tr></table></figure><p>可以看到以下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Types:</span> <span class="string">deb</span></span><br><span class="line"><span class="attr">URIs:</span> <span class="string">http://archive.ubuntu.com/ubuntu/</span></span><br><span class="line"><span class="attr">Suites:</span> <span class="string">oracular</span> <span class="string">oracular-updates</span> <span class="string">oracular-backports</span> <span class="string">oracular-proposed</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="attr">Signed-By:</span> <span class="string">/usr/share/keyrings/ubuntu-archive-keyring.gpg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Types:</span> <span class="string">deb</span></span><br><span class="line"><span class="attr">URIs:</span> <span class="string">http://security.ubuntu.com/ubuntu/</span></span><br><span class="line"><span class="attr">Suites:</span> <span class="string">oracular-security</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="attr">Signed-By:</span> <span class="string">/usr/share/keyrings/ubuntu-archive-keyring.gpg</span></span><br></pre></td></tr></table></figure><p>需要在Types键添加deb-src值，即：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Types:</span> <span class="string">deb</span> <span class="string">deb-src</span></span><br><span class="line"><span class="attr">URIs:</span> <span class="string">http://archive.ubuntu.com/ubuntu/</span></span><br><span class="line"><span class="attr">Suites:</span> <span class="string">oracular</span> <span class="string">oracular-updates</span> <span class="string">oracular-backports</span> <span class="string">oracular-proposed</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="attr">Signed-By:</span> <span class="string">/usr/share/keyrings/ubuntu-archive-keyring.gpg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Types:</span> <span class="string">deb</span> <span class="string">deb-src</span></span><br><span class="line"><span class="attr">URIs:</span> <span class="string">http://security.ubuntu.com/ubuntu/</span></span><br><span class="line"><span class="attr">Suites:</span> <span class="string">oracular-security</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span> <span class="string">restricted</span> <span class="string">universe</span> <span class="string">multiverse</span></span><br><span class="line"><span class="attr">Signed-By:</span> <span class="string">/usr/share/keyrings/ubuntu-archive-keyring.gpg</span></span><br></pre></td></tr></table></figure><p>保存并退出后(按Esc后输入:wq回车),运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>也可解决此问题</p><h3 id="下载源代码"><a class="markdownIt-Anchor" href="#下载源代码"></a> 下载源代码</h3><p>查看《通用构建说明》: <a href="https://mariadb.com/kb/en/generic-build-instructions/">https://mariadb.com/kb/en/generic-build-instructions/</a></p><p>找一个好地方存放你mariadb源代码，我选的是/usr/local<br />使用git工具将源代码clone下来,放在这里的mariadb_source目录下，进入这个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/mariadb/server mariadb_source</span><br><span class="line"><span class="built_in">cd</span> mariadb_source</span><br></pre></td></tr></table></figure><p>切换git的分支，我需要最新的，所以选择main分支。<br />详情请看《以慵懒的方式获取、构建和测试最新的mariadb》：<a href="https://mariadb.com/kb/en/get-build-and-test-latest-mariadb-the-lazy-way/">https://mariadb.com/kb/en/get-build-and-test-latest-mariadb-the-lazy-way/</a><br /><s>很明显我不承认我是慵懒的人，我还看了《mariadb源代码》：</s> <a href="https://mariadb.com/kb/en/getting-the-mariadb-source-code/">https://mariadb.com/kb/en/getting-the-mariadb-source-code/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mariadb_source</span><br><span class="line">sudo git checkout main</span><br></pre></td></tr></table></figure><p>这个目录下就存放着最新的mariadb源代码了，这个地方用git管理很方便。为了便于管理代码，我们在别的地方存放构建的代码,我选择在上一级目录新建一个叫mariadb的目录存放构建的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo <span class="built_in">mkdir</span> mariadb</span><br><span class="line"><span class="built_in">cd</span> mariadb</span><br></pre></td></tr></table></figure><h3 id="使用cmake构建"><a class="markdownIt-Anchor" href="#使用cmake构建"></a> 使用cmake构建：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake ../mariadb_source</span><br><span class="line">sudo cmake --build .</span><br><span class="line">sudo cmake --install .</span><br></pre></td></tr></table></figure><p>中间如果出现问题我没记录，多半是缺少依赖问题，搜一下就知道了。</p><p>这样就构建好mariadb的服务器端啦，不过先不急着用，官网下还给了几个操作，虽然不知道什么用，但还是先照做吧。</p><h3 id="mariadb首次启动"><a class="markdownIt-Anchor" href="#mariadb首次启动"></a> mariadb首次启动</h3><p>创建一个叫mariadb/mysql的用户<s>以前叫mysql,现在文档叫mariadb了，不过实测两个都可以</s><br />创建一个叫mysql的组<br />将mariadb/mysql用户添加到mysql组里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser mysql</span><br><span class="line">sudo groupadd mysql</span><br><span class="line">sudo usermod -g mysql mysql</span><br></pre></td></tr></table></figure><p>命令详情可以看<br />这个回答：<a href="https://askubuntu.com/questions/165942/how-to-change-primary-group">https://askubuntu.com/questions/165942/how-to-change-primary-group</a><br />和ubuntu官网文档：</p><ul><li>adduser: <a href="https://manpages.ubuntu.com/manpages/oracular/en/man8/adduser.8.html">https://manpages.ubuntu.com/manpages/oracular/en/man8/adduser.8.html</a></li><li>groupadd: <a href="https://manpages.ubuntu.com/manpages/oracular/en/man8/groupadd.8.html">https://manpages.ubuntu.com/manpages/oracular/en/man8/groupadd.8.html</a></li><li>usermod: <a href="https://manpages.ubuntu.com/manpages/oracular/en/man8/usermod.8.html">https://manpages.ubuntu.com/manpages/oracular/en/man8/usermod.8.html</a></li></ul><p>创建mariadb配置文件,官方有许多推荐位置，我放在/etc下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>里面输入以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mariadbd]</span><br><span class="line">datadir=/usr/local/mariadb/data/</span><br></pre></td></tr></table></figure><p>详情请看：</p><ul><li>使用选项文件配置mariadb：<a href="https://mariadb.com/kb/en/configuring-mariadb-with-option-files/">https://mariadb.com/kb/en/configuring-mariadb-with-option-files/</a></li><li>服务器系统变量： <a href="https://mariadb.com/kb/en/server-system-variables/">https://mariadb.com/kb/en/server-system-variables/</a></li></ul><p>修改mariadb目录所属的用户为mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R mysql /usr/local/mariadb</span><br></pre></td></tr></table></figure><p>安装系统表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mariadb</span><br><span class="line">./scripts/mariadb-install-db --user=mysql --srcdir=/usr/local/mariadb_source --builddir=/usr/local/mariadb --datadir=/usr/local/mariadb/data</span><br><span class="line">/usr/local/mariadb/bin/mariadbd-safe --user=mysql &amp;</span><br></pre></td></tr></table></figure><p>然后就在上级目录下创建了一个mysql目录，进入这个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../mysql</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.    COPYING  include         man           README-wsrep  sql-bench</span><br><span class="line">..   CREDITS  INSTALL-BINARY  mariadb-test  scripts       support-files</span><br><span class="line">bin  docs     lib             README.md     share         THIRDPARTY</span><br></pre></td></tr></table></figure><p>然后就可以设置环境变量了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li>先按&quot;G&quot;（大写的）跳转到文件末尾</li><li>按&quot;i&quot;（小写的）切换到插入模式</li><li>输入以下内容</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mariadb系统表环境变量</span><br><span class="line">export mysql=/usr/local/mysql</span><br><span class="line">export PATH=$mysql/bin:<span class="string">&quot;$PATH&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>按一下&quot;ESC&quot;（这个按键一般在键盘的左上角）切换到普通模式</li><li>输入&quot;:wq&quot;后回车(键盘上的Enter按键)，即可保存退出</li></ol><p>对vim操作如有疑问可以查看<a href="https://vimcdoc.sourceforge.net">vim官方文档中文翻译</a>，或者<a href="https://stalk-evolto.github.io/2024-04-07-vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html">我的工具书</a>。</p><p>然后使刚刚设置的环境变量生效，输入（纯命令用户不要试）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>尝试启动一下mariadb服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su mysql</span><br><span class="line">mariadbd</span><br></pre></td></tr></table></figure><p>如果成功启动了那说明安装没有问题。<br />关闭这个任务有点问题，我使用&quot;Ctrl+c&quot;无法终止，可以开启另一个终端，使用netstat查看mariadb进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tulpn | grep mariadb</span><br></pre></td></tr></table></figure><p>然后使用kill命令杀死这个进程即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 &#123;刚刚查询到的进程号&#125;</span><br></pre></td></tr></table></figure><p>也可以用pgrep查询（一步到位）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 `pgrep mariadb`</span><br></pre></td></tr></table></figure><p>这种启动方式有点问题，每次使用前还要特地去启动也不优雅。<br />所以我们设置让其自启动。</p><h2 id="设置mariadb自启动"><a class="markdownIt-Anchor" href="#设置mariadb自启动"></a> 设置mariadb自启动</h2><p>设置自启动的工具有许多，我这里用systemd。</p><p>详细配置说明查看：</p><ul><li>mariadb的systemd页面： <a href="https://mariadb.com/kb/en/systemd/#interacting-with-the-mariadb-server-process">https://mariadb.com/kb/en/systemd/#interacting-with-the-mariadb-server-process</a></li><li>systemd的文档： <a href="https://www.freedesktop.org/software/systemd/man/latest/systemctl.html">https://www.freedesktop.org/software/systemd/man/latest/systemctl.html</a></li><li>systemd手册： <a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html">https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html</a></li></ul><p>在系统表mysql目录里边存放着一个systemd需要使用的文件，mysql目录下的support-files/systemd/mariadb.service，将其复制到systemd的管理服务的目录下（/etc/systemd/system)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line">sudo <span class="built_in">cp</span> ./support-files/systemd/mariadb.service /etc/systemd/system</span><br></pre></td></tr></table></figure><p>但是这个文件是不符合我们当前使用的环境的，我们需要对其做一些配置</p><ol><li>先在/etc/systemd/system目录下创建mariadb.service的配置文件目录mariadb.service.d</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /etc/systemd/system/mariadb.service.d</span><br></pre></td></tr></table></figure><ol start="2"><li>在这个目录下创建一个配置文件my_mariadb.conf（其实名字随便取，后缀名是.conf就行）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system/mariadb.service.d</span><br><span class="line">sudo vim my_mariadb.conf</span><br></pre></td></tr></table></figure><ol start="3"><li>在这个配置文件里添加对mariadb.service文件的补充与修改<br />先按&quot;i&quot;（小写的）切换到输入模式<br />输入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">ReadWritePaths=</span><br><span class="line">ReadWritePaths=-/usr/local/mariadb/data</span><br><span class="line"></span><br><span class="line">Environment=&quot;MYSQLD_OPTS=--wsrep-new-cluster&quot;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br></pre></td></tr></table></figure><p>然后按一下ESC（这按键一般在键盘的左上角）<br />然后输入&quot;:wq&quot;后回车(键盘的Enter键)，保存退出</p><ol start="4"><li>使用systemd设置mariadbd自启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mariadb.service</span><br></pre></td></tr></table></figure><p>然后就可以通过systemctl命令查看运行状态了<br />先启动一下mariadb.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start maraidb.service</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mariadb.service</span><br></pre></td></tr></table></figure><p><img src="/images/mariadb_usr/mariadb_service_status.png" alt="mariadb_service_status" /><br />其中active为running,status为&quot;Taking your SQL requests now…&quot;，就表示启动成功了。<br />Loaded后面的两个enable表示自启动设置成功了。</p><h2 id="mariadb客户端的使用"><a class="markdownIt-Anchor" href="#mariadb客户端的使用"></a> mariadb客户端的使用</h2><h3 id="mariadb自带客户端"><a class="markdownIt-Anchor" href="#mariadb自带客户端"></a> mariadb自带客户端</h3><p>详情请看：</p><ul><li>mariadb客户端: <a href="https://mariadb.com/kb/en/mariadb-command-line-client/">https://mariadb.com/kb/en/mariadb-command-line-client/</a></li><li>注册系统表默认创建的用户： <a href="https://mariadb.com/kb/en/mariadb-install-db/#user-accounts-created-by-default">https://mariadb.com/kb/en/mariadb-install-db/#user-accounts-created-by-default</a></li></ul><p>在你创建系统表后，会有两个没有密码的用户，分别是mysql和root。<br />但是直接使用这两个账户登陆又会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mariadb --user=root</span><br><span class="line">ERROR 1698 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><p>可以通过命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mariadb</span><br></pre></td></tr></table></figure><p>这命令使用root用户登陆mariadb客户端。因为mariadb使用嵌套字验证，可以通过linux的root用户无密码直接登陆。如果你有管理员用户的密码你也可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">mariadb --user=root</span><br></pre></td></tr></table></figure><p>进入后设置以下root账户的密码为&quot;XH4VnT3_jt&quot;（你可以替换成你喜欢的密码）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;XH4VmT3_jt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在root账户下你可以做很多事情，比如设置用户mysql的密码为newpassword（你也可以设置为你喜欢的密码）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;mysql&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br></pre></td></tr></table></figure><p>其实账户信息都被存在mysql数据库下的user表里，可以通过sql语句查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p>不过这里的表里的密码是加密过的，没什么实用意义。</p><p>更多sql语句可以查看官方文档： <a href="https://mariadb.com/kb/en/sql-statements-structure/">https://mariadb.com/kb/en/sql-statements-structure/</a></p><p>不过数据库光有这一个客户端是不够用的，比如我觉得自带的客户端不合我的胃口，想自己开发一个客户端。而且我们有各种数据来源，比如通过别的程序获取的数据。实现这些就需要使用官方提供的各种程序语言的连接器啦。</p><h2 id="c-c连接器"><a class="markdownIt-Anchor" href="#c-c连接器"></a> C &amp; C++连接器</h2><p>可以检查系统表的目录下的lib目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mysql/lib</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>如果有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.                   libmariadb.so       libmysqlclient_r.so  plugin</span><br><span class="line">..                  libmariadb.so.3     libmysqlclient.so</span><br><span class="line">libmariadb.a        libmysqlclient.a    libmysqlservices.a</span><br><span class="line">libmariadbclient.a  libmysqlclient_r.a  pkgconfig</span><br></pre></td></tr></table></figure><p>那么你已经安装了C &amp; C++连接器。</p><p>如果没有上述文件，甚至没有lib目录：<br />请参考官方文档自己编译一份：<a href="https://mariadb.com/kb/en/building-connectorc-from-source/">https://mariadb.com/kb/en/building-connectorc-from-source/</a><br /><s>我没做这步，先不乱介绍了</s></p><p>编译好后添加LD_LIBRARY_PATH环境变量：<br />这次设置环境变量有点不一样，因为要设置所有用户都能使用用到的环境变量，而LD_LIBRARY_PATH直接设置全局环境变量设置有一些问题，所以可以这样设置这个环境变量：</p><ol><li>在/etc/ld.so.conf.d目录下创建一个配置文件（我这里设置的是libmariadb.conf）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ld.so.conf.d</span><br><span class="line">sudo vim libmariadb.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>在里面加入C &amp; C++连接器编译出的库的位置:<br />先按&quot;i&quot;进入插入模式<br />输入以下内容：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mariadb lib and so</span><br><span class="line">/usr/local/mariadb/lib</span><br></pre></td></tr></table></figure><p>按一下&quot;ESC&quot;回到普通模式<br />输入&quot;:wq&quot;回车</p><blockquote><p><strong>注：</strong> 这里的&quot;/usr/local/mariadb/lib&quot;你需要成设置你自己的libmariadb.so.3文件所在的路径</p></blockquote><ol start="3"><li>更新高速缓存使环境变量生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure><p>详情看:</p><ul><li>ubuntu官方文档： <a href="https://help.ubuntu.com/community/EnvironmentVariables">https://help.ubuntu.com/community/EnvironmentVariables</a></li><li>LD_LIBRARY_PATH未被从.profile或/etc/environment加载： <a href="https://bugs.launchpad.net/ubuntu/+source/xorg/+bug/366728">https://bugs.launchpad.net/ubuntu/+source/xorg/+bug/366728</a></li></ul><blockquote><p><strong>注:</strong> C &amp; C++连接器我暂时未使用，需要安装是因为是python连接器的依赖，使用方法暂时留空。</p></blockquote><h2 id="python连接器"><a class="markdownIt-Anchor" href="#python连接器"></a> Python连接器</h2><p>推荐看官方文档：</p><ul><li>github仓库的文档（有参考文档）：<a href="https://mariadb-corporation.github.io/mariadb-connector-python/index.html">https://mariadb-corporation.github.io/mariadb-connector-python/index.html</a></li><li>mariadb官方教程（举例多，容易理解）： <a href="https://mariadb.com/docs/server/connect/programming-languages/python/">https://mariadb.com/docs/server/connect/programming-languages/python/</a></li></ul><h3 id="安装依赖-2"><a class="markdownIt-Anchor" href="#安装依赖-2"></a> 安装依赖</h3><p>首先电脑里应该有python<br />ubuntu没有python可以直接使用apt安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python</span><br></pre></td></tr></table></figure><p>查看一下安装的python的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>除此之外还需要有C编译器，这里安装GCC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>还需要有python开发文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-dev</span><br></pre></td></tr></table></figure><p>还需要有openGL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssl</span><br></pre></td></tr></table></figure><p>安装MariaDB Connector/C（也就是C连接器）,可以参考上一节：<a href="#C-C-%E8%BF%9E%E6%8E%A5%E5%99%A8">C &amp; C++连接器</a></p><h3 id="安装python连接器"><a class="markdownIt-Anchor" href="#安装python连接器"></a> 安装python连接器</h3><p>在ubuntu中直接使用pip安装python的包会违背ubuntu安全策略： <a href="https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern">https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-×-this-environment-is-extern</a></p><p>按照帖子中的解决方案，选择创建虚拟环境：</p><ol><li>安装python虚拟环境venv:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-venv</span><br></pre></td></tr></table></figure><ol start="2"><li>在名为<sub>/.venv/mariadb的目录中创建新的虚拟环境（其实放在哪都行，放在</sub>/.venv只是个人习惯）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv ~/.venv/mariadb</span><br></pre></td></tr></table></figure><ol start="3"><li>在当前终端中激活此虚拟环境：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/mariadb/bin/activate</span><br></pre></td></tr></table></figure><ol start="4"><li>这时候就可以使用pip安装了</li><li>(可选)不过在这之前我们查看一下这个虚拟环境的组成结构：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.venv/mariadb</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.  ..  bin  include  lib  lib64  pyvenv.cfg  share</span><br></pre></td></tr></table></figure><p>我所知的：</p><ul><li>bin 里面放着当前虚拟环境的python、pip的可执行文件</li><li>include里面还是空的，我准备把mariadb的python连接器源码放这</li><li>lib和lib64,里面放着当前虚拟环境的python安装的包</li><li>share里面有东西，但是还不知道放的什么</li></ul><p>回到正题，我们先要获得python连接器的源码，我打算放到虚拟环境的include里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.venv/mariadb/include</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mariadb-corporation/mariadb-connector-python.git</span><br></pre></td></tr></table></figure><p>clone下来的源码在mariadb-connector-python下，进入构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mariadb-connector-python</span><br><span class="line">python -m pip install .</span><br></pre></td></tr></table></figure><p>你会发现报错了，权限不足，而你使用sudo,会报错违反ubuntu安全策略，所以只能使用管理员用户安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="built_in">source</span> ../../bin/activate</span><br><span class="line">python -m pip install .</span><br></pre></td></tr></table></figure><p>测试一下安装情况：</p><ol><li>先退出管理员用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果没激活python虚拟环境，先激活一下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/mariadb/bin/activate</span><br></pre></td></tr></table></figure><ol start="3"><li>使用python尝试导入包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;import mariadb&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>如果MariaDB Connector/Python安装正确，则命令不返回任何输出。</p></li><li><p>如果Python无法加载MariaDB Connector/Python，则命令会引发以下错误：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;mariadb&#x27;</span></span><br></pre></td></tr></table></figure><p>到此安装就完成了，使用方法参考官方文档：</p><ul><li>github仓库的文档（有参考文档）：<a href="https://mariadb-corporation.github.io/mariadb-connector-python/index.html">https://mariadb-corporation.github.io/mariadb-connector-python/index.html</a></li><li>mariadb官方教程（举例多，容易理解）： <a href="https://mariadb.com/docs/server/connect/programming-languages/python/">https://mariadb.com/docs/server/connect/programming-languages/python/</a></li></ul><blockquote><p><strong>编者的碎碎念:</strong> 我先睡一会觉，醒来再继续写…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aiohttp库使用笔记</title>
      <link href="/2024-11-02-aiohttp%E5%BA%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/2024-11-02-aiohttp%E5%BA%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a class="markdownIt-Anchor" href="#package-version"></a> package version</h1><table><thead><tr><th style="text-align:center">package</th><th style="text-align:left">version</th></tr></thead><tbody><tr><td style="text-align:center">ubuntu</td><td style="text-align:left">24.10</td></tr><tr><td style="text-align:center">python</td><td style="text-align:left">3.12.7</td></tr><tr><td style="text-align:center">aiohttp</td><td style="text-align:left">3.10.10</td></tr></tbody></table><h1 id="aiohttp简介"><a class="markdownIt-Anchor" href="#aiohttp简介"></a> aiohttp简介</h1><p>aiohttp是一个用于python的异步HTTP客户端/服务器。</p><ul><li>支持HTTP客户端和服务器。</li><li>同时支持WebSocket客户端和服务器。</li></ul><p>具体文档查看官网：</p><ul><li><a href="https://docs.aiohttp.org/en/stable/index.html">https://docs.aiohttp.org/en/stable/index.html</a></li></ul><p>用途：可以用来编写网页爬取脚本。</p><h2 id="httphypertext-transfer-protocol"><a class="markdownIt-Anchor" href="#httphypertext-transfer-protocol"></a> HTTP(HyperText Transfer Protocol)</h2><p>一种传输标准。详情查看:</p><ul><li>维基百科: <a href="https://en.wikipedia.org/wiki/HTTP">https://en.wikipedia.org/wiki/HTTP</a></li><li>MDN: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">https://developer.mozilla.org/en-US/docs/Web/HTTP</a></li></ul><p>其实我也没整那么明白，就知道我们用浏览器浏览的网页大部分都是用http和https（http和ssl）传输的。有http客户端就能自己处理网页上的信息，例如自动将某些数据拿下来汇总做成表格，而不需要用人手一条一条复制。</p><p>http使用TCP/IP连接，有请求和响应进行数据交换。例如现在你访问我的博客:</p><pre class="mermaid">sequenceDiagram    participant Y as 你的电脑    participant M as Stalk的博客    Y ->> M: 我要得到 你的根目录下的index.html网页 用HTTP2.0协议传输给我    Note over Y,M: 请求    M ->> Y: HTTP2.0协议的消息：你的请求我收到了，很合理，现在给你 index.html    Note over Y,M: 响应</pre><p>实际上的请求会比这多许多信息，你可以通过抓包工具获取这些信息，例如浏览器的F12开发者工具-网络:<br /><img src="/images/aiohttp/resp.png" alt="HTTP request" /></p><p>我们先看请求头：</p><p><code>GET /index.html HTTP2.0</code>这里有三个信息：<code>get</code>请求方法、请求目的<code>/index.html</code>、传输协议<code>HTTP2.0</code></p><p>请求方法:</p><ul><li>GET: 请求一个指定资源的表示形式，使用 <code>GET</code> 的请求应该只被用于获取数据。例如获取一个网页。</li><li>HEAD: 与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。主要用来获取资源的元数据，例如文件大小、最后修改时间等等。</li><li>POST: 向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。一般用于向服务器添加数据。</li><li>PUT: 向指定资源位置上传其最新内容。一般用于修改服务器上的数据，会覆盖被修改数据的原有内容，谨慎使用！！</li><li>DELETE: 请求服务器删除Request-URI所标识的资源。顾名思义，用来删除数据。</li><li>TRACE: 回显服务器收到的请求，主要用于测试或诊断。<s>没搞明白</s></li><li>OPTIONS: 这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用<code>*</code>来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</li><li>CONNECT: 方法建立一个到由目标资源标识的服务器的隧道。<s>没搞明白</s></li><li>PATCH: 请求目标资源根据请求中包含的表示中定义的部分更新来修改其状态。可以和PUT作作比较，PUT修改整个文件，PATCH修改文件的部分。</li></ul><blockquote><p><strong>注:</strong> 所有通用Web服务器都需要至少实现GET和HEAD方法，所有其他方法都被规范视为可选。</p></blockquote><p><s>知道这些对我来说暂时够用啦，我平时也就用用GET方法获取一下网页。</s></p><p>我们再看响应头:</p><p><code>HTTP2 200</code>这里有两个信息: 传输协议<code>HTTP2</code>、响应状态代码<code>200</code></p><p>响应状态代码:</p><ul><li>1XX: (信息响应)，请求已收到，正在继续处理。</li><li>2XX: (成功响应)，已成功接收、理解并接受请求。</li><li>3XX: (重定向),需要采取进一步行动，以完成请求。</li><li>4XX: (客户端错误)，请求包含错误的语法或无法完成。</li><li>5XX: (服务器错误)，服务器无法完成一个明显有效的请求。</li></ul><p>更多详情可以参考MDN的文档: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><p>例如我们常见的<strong>404找不到页面</strong>就是客户端错误，请求的网页不存在。（可能是网址输错了或者是网站换域名了）</p><p>比较常见的有：</p><ul><li>200: 请求已经成功.</li><li>404: 服务器无法找到所请求的资源。</li><li>403: 服务被拒绝。</li></ul><p>目前常见这几个，别的等见到了再补充。</p><h2 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h2><p>平时我们编写的python程序是按照顺序进行的,遇到阻塞操作就需要等待操作完成才能继续。而使用协程遇到阻塞操作时，可以设置挂起，切换处理其他可以进行的协程任务，直到整个协程任务组完成。</p><p>python中的协程实现可以查阅官方文档：</p><ul><li>协程任务: <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html">https://docs.python.org/zh-cn/3/library/asyncio-task.html</a></li><li>asyncio库参考: <a href="https://docs.python.org/zh-cn/3/library/asyncio.html">https://docs.python.org/zh-cn/3/library/asyncio.html</a></li></ul><h1 id="aiohttp安装"><a class="markdownIt-Anchor" href="#aiohttp安装"></a> aiohttp安装</h1><p>使用pip可以很轻易的安装aiohttp库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp</span><br></pre></td></tr></table></figure><p>官方还推荐安装aiodns库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiodns</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong> 我目前没遇到安装问题，有问题欢迎评论区交流。</p></blockquote><h1 id="aiohttp使用"><a class="markdownIt-Anchor" href="#aiohttp使用"></a> aiohttp使用</h1><h2 id="获取网页"><a class="markdownIt-Anchor" href="#获取网页"></a> 获取网页</h2><h3 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h3><p>官方文档给了以下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="built_in">print</span>(resp.status)</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> resp.text())</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>一行一行解释：</p><ul><li>第1,2行：导入aiohttp库和asyncio库(python的官方库: <a href="https://docs.python.org/zh-cn/3/library/asyncio.html">https://docs.python.org/zh-cn/3/library/asyncio.html</a>)</li><li>第4行：使用<code>async</code>语法声明一个协程函数<code>main()</code></li><li>第5行：声明了<code>session</code>对象为<code>aiohttp.ClientSession</code>类。</li><li>第6行：声明了<code>resp</code>协程对象，内容是<code>session.get()</code>方法获取<code>http://httpbin.org/get</code>的响应内容。</li><li>第7,8行：打印响应状态码status和响应内容的文本</li><li>第11行：运行<code>main()</code>协程函数(因为简单调用一个协程不会运行，这里使用<code>asyncio.run()</code>调用<blockquote><p>详情见: <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#coroutine">https://docs.python.org/zh-cn/3/library/asyncio-task.html#coroutine</a>)</p></blockquote></li></ul><p>其实这个函数还能这样写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    resp = <span class="keyword">await</span> session.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(resp.status)</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">await</span> resp.text())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> resp.close()</span><br><span class="line">    <span class="keyword">await</span> session.close()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>效果是一样的，使用<code>with</code>可以自动回收资源，但是<code>with</code>下的代码都要加一级缩进；而这种写法不需要太多的缩进，但是使用完后要手动调用<code>close()</code>方法回收资源。孰优孰劣视情况而定，灵活使用。</p><h3 id="实际使用"><a class="markdownIt-Anchor" href="#实际使用"></a> 实际使用</h3><p>例如我现在准备获取快手直播的网页信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_webpage</span>(<span class="params">liveUrl: <span class="built_in">str</span>, headers: <span class="built_in">dict</span> = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取网页信息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    liveUrl = liveUrl.strip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    st = liveUrl.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    st = st[<span class="built_in">len</span>(st) - <span class="number">1</span>]</span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    res = <span class="keyword">await</span> session.get(url=liveUrl, headers=headers)</span><br><span class="line"></span><br><span class="line">    prog = re.<span class="built_in">compile</span>(<span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                            (?:window.__INITIAL_STATE__=)</span></span><br><span class="line"><span class="string">                            (.*)</span></span><br><span class="line"><span class="string">                            (?:;\(function\(\))+</span></span><br><span class="line"><span class="string">                           &quot;&quot;&quot;</span>, re.VERBOSE)</span><br><span class="line">    ss = prog.search(<span class="keyword">await</span> res.text(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    text = ss.group(<span class="number">1</span>)</span><br><span class="line">    text = text.replace(<span class="string">&#x27;undefined&#x27;</span>,<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">    text = text.replace(<span class="string">r&#x27;\n&#x27;</span>,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    webpage = json.loads(text)</span><br><span class="line">    <span class="built_in">print</span>(webpage)</span><br><span class="line">    userLiveInfo = webpage[<span class="string">&#x27;liveroom&#x27;</span>][<span class="string">&#x27;playList&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(userLiveInfo)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        liveRoomId = userLiveInfo[<span class="string">&#x27;liveStream&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;liveRoomId获取失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    res.close()</span><br><span class="line">    <span class="keyword">await</span> session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*i&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    urls = [<span class="string">&#x27;https://live.kuaishou.com/u/KPL704668133&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    asyncio.run(get_webpage(urls[<span class="number">0</span>], headers = headers))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="websocket客户端"><a class="markdownIt-Anchor" href="#websocket客户端"></a> WebSocket客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wssServerStart</span>(<span class="params">webSocketUrl: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;启动websocket服务&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.ws_connect(webSocketUrl) <span class="keyword">as</span> ws:</span><br><span class="line">            <span class="keyword">await</span> self.onOpen(ws)</span><br><span class="line">            <span class="keyword">await</span> asyncio.gather( ws_receive(ws),</span><br><span class="line">                                  keepHeartBeat(ws))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">ws_receive</span>(<span class="params">ws</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;分别处理websocket服务器应答类型的消息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> msg <span class="keyword">in</span> ws:</span><br><span class="line">        <span class="keyword">if</span> msg.<span class="built_in">type</span> <span class="keyword">is</span> aiohttp.WSMsgType.BINARY:</span><br><span class="line">            <span class="built_in">print</span>(msg.data)</span><br><span class="line">        <span class="keyword">elif</span> msg.<span class="built_in">type</span> <span class="keyword">is</span> aiohttp.WSMsgType.ERROR:</span><br><span class="line">            onError(ws, msg.data)</span><br><span class="line">        <span class="keyword">elif</span> msg.<span class="built_in">type</span> <span class="keyword">is</span> aiohttp.WSMsgType.CLOSE:</span><br><span class="line">            <span class="keyword">await</span> onClose(ws)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> msg.<span class="built_in">type</span> <span class="keyword">is</span> aiohttp.WSMsgType.PING:</span><br><span class="line">            <span class="keyword">await</span> ws.pong()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onError</span>(<span class="params">ws, error</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;收到服务器返回的错误提示&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;websocket 异常&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">onClose</span>(<span class="params">ws</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;关闭与服务器的连接&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> ws.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heartbeatData</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;封装心跳包&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    obj = <span class="built_in">int</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.SerializeToString()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">keepHeartBeat</span>(<span class="params">ws</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送心跳包&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 20秒发一次心跳包</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">20</span>)</span><br><span class="line">        payload = heartbeatData()</span><br><span class="line">        <span class="keyword">await</span> ws.send_bytes(payload)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用笔记</title>
      <link href="/2024-04-07-vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/2024-04-07-vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a class="markdownIt-Anchor" href="#package-version"></a> package version</h1><table><thead><tr><th style="text-align:center">package</th><th style="text-align:left">version</th></tr></thead><tbody><tr><td style="text-align:center">ubuntu</td><td style="text-align:left">24.04</td></tr><tr><td style="text-align:center">vim</td><td style="text-align:left">9.1</td></tr></tbody></table><h1 id="vim安装与配置"><a class="markdownIt-Anchor" href="#vim安装与配置"></a> vim安装与配置</h1><h2 id="vim简介"><a class="markdownIt-Anchor" href="#vim简介"></a> vim简介</h2><p>一个传统、看似繁琐，实际上很有趣的编辑器。<br />官网：<a href="https://www.vim.org">https://www.vim.org</a></p><p>vim的官方文档编写得十分有趣，有时间推荐阅读。<br />官方文档(英文)： <a href="https://vimhelp.org">https://vimhelp.org</a></p><p>如果你和我一样英文不太好，可以下载中文翻译文件。<br />中文帮助： <a href="https://vimcdoc.sourceforge.net">https://vimcdoc.sourceforge.net</a><br />在此感谢vimcdoc项目的参与者们，让我们不用因为语言差异，而错过这个强大的工具。</p><blockquote><p><strong>注:</strong> 本文只是作者对vim帮助中常用技巧的总结，以及初步使用时的注意事项，以防遗忘。</p></blockquote><h2 id="vim安装"><a class="markdownIt-Anchor" href="#vim安装"></a> vim安装</h2><p><strong>ubuntu</strong>系统可以通过<code>apt-get</code>命令快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p>此方式的默认安装路径为<code>/usr/share/vim</code></p><p>其他安装方式详情见：<a href="https://www.vim.org/download.php">https://www.vim.org/download.php</a></p><h2 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h2><h2 id="入门"><a class="markdownIt-Anchor" href="#入门"></a> 入门</h2><p>在终端输入<code>vimtutor</code>,即可进入简易教程。</p><h2 id="配置vim"><a class="markdownIt-Anchor" href="#配置vim"></a> 配置vim</h2><p>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version</span><br></pre></td></tr></table></figure><p>会得到以下结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">VIM - Vi IMproved 9.1 (2024 Jan 02, 编译于 Mar 31 2024 00:15:53)</span><br><span class="line">包含补丁: 1-16</span><br><span class="line">修改者 team+vim@tracker.debian.org</span><br><span class="line">编译者 team+vim@tracker.debian.org</span><br><span class="line">巨型版本 无图形界面。  可使用(+)与不可使用(-)的功能:</span><br><span class="line">+acl               +file_in_path      +mouse_urxvt       -tag_any_white</span><br><span class="line">+arabic            +find_in_path      +mouse_xterm       -tcl</span><br><span class="line">+autocmd           +<span class="built_in">float</span>             +multi_byte        +termguicolors</span><br><span class="line">+autochdir         +folding           +multi_lang        +terminal</span><br><span class="line">-autoservername    -footer            -mzscheme          +terminfo</span><br><span class="line">-balloon_eval      +fork()            +netbeans_intg     +termresponse</span><br><span class="line">+balloon_eval_term +gettext           +num64             +textobjects</span><br><span class="line">-browse            -hangul_input      +packages          +textprop</span><br><span class="line">++builtin_terms    +iconv             +path_extra        +timers</span><br><span class="line">+byte_offset       +insert_expand     -perl              +title</span><br><span class="line">+channel           +ipv6              +persistent_undo   -toolbar</span><br><span class="line">+cindent           +job               +popupwin          +user_commands</span><br><span class="line">-clientserver      +jumplist          +postscript        +vartabs</span><br><span class="line">-clipboard         +keymap            +printer           +vertsplit</span><br><span class="line">+cmdline_compl     +lambda            +profile           +vim9script</span><br><span class="line">+cmdline_hist      +langmap           -python            +viminfo</span><br><span class="line">+cmdline_info      +libcall           +python3           +virtualedit</span><br><span class="line">+comments          +linebreak         +quickfix          +visual</span><br><span class="line">+conceal           +lispindent        +reltime           +visualextra</span><br><span class="line">+cryptv            +listcmds          +rightleft         +vreplace</span><br><span class="line">+cscope            +localmap          -ruby              +wildignore</span><br><span class="line">+cursorbind        -lua               +scrollbind        +wildmenu</span><br><span class="line">+cursorshape       +menu              +signs             +windows</span><br><span class="line">+dialog_con        +mksession         +smartindent       +writebackup</span><br><span class="line">+diff              +modify_fname      +sodium            -X11</span><br><span class="line">+digraphs          +mouse             -sound             +xattr</span><br><span class="line">-dnd               -mouseshape        +spell             -xfontset</span><br><span class="line">-ebcdic            +mouse_dec         +startuptime       -xim</span><br><span class="line">+emacs_tags        +mouse_gpm         +statusline        -xpm</span><br><span class="line">+<span class="built_in">eval</span>              -mouse_jsbterm     -sun_workshop      -xsmp</span><br><span class="line">+ex_extra          +mouse_netterm     +syntax            -xterm_clipboard</span><br><span class="line">+extra_search      +mouse_sgr         +tag_binary        -xterm_save</span><br><span class="line">-farsi             -mouse_sysmouse    -tag_old_static</span><br><span class="line">     系统 vimrc 文件: <span class="string">&quot;/etc/vim/vimrc&quot;</span></span><br><span class="line">     用户 vimrc 文件: <span class="string">&quot;<span class="variable">$HOME</span>/.vimrc&quot;</span></span><br><span class="line"> 第二用户 vimrc 文件: <span class="string">&quot;~/.vim/vimrc&quot;</span></span><br><span class="line">      用户 exrc 文件: <span class="string">&quot;<span class="variable">$HOME</span>/.exrc&quot;</span></span><br><span class="line">       defaults 文件: <span class="string">&quot;<span class="variable">$VIMRUNTIME</span>/defaults.vim&quot;</span></span><br><span class="line">         <span class="variable">$VIM</span> 预设值: <span class="string">&quot;/usr/share/vim&quot;</span></span><br><span class="line">编译方式: gcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/vim-g8cgSd/vim-9.1.0016=. -flto=auto -ffat-lto-objects -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -fdebug-prefix-map=/build/vim-g8cgSd/vim-9.1.0016=/usr/src/vim-2:9.1.0016-1ubuntu7 -DSYS_VIMRC_FILE=\&quot;/etc/vim/vimrc\&quot; -DSYS_GVIMRC_FILE=\&quot;/etc/vim/gvimrc\&quot; -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">链接方式: gcc -Wl,-Bsymbolic-<span class="built_in">functions</span> -flto=auto -ffat-lto-objects -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim -lm -ltinfo -lselinux -lsodium -lacl -lattr -lgpm -L/usr/lib/python3.12/config-3.12-x86_64-linux-gnu -lpython3.12 -ldl -lm</span><br></pre></td></tr></table></figure><p><strong>39-101</strong>行可以看到系统和用户的vimrc文件所在路径</p><h4 id="安装目录"><a class="markdownIt-Anchor" href="#安装目录"></a> 安装目录</h4><p><strong>103</strong>行可以看到vim的安装目录，后续安装<a href="#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2">主题配色</a>时会用到</p><p>配置vim可以选择更改系统vimrc文件（全局配置），在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/vim/vimrc</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong> 每个用户都会使用这个配置文件设置的vim，如果这是你的个人电脑，只有你一个用户，可以配置这个文件。</p></blockquote><p>如果这台电脑不止你一个人使用，你只有其中一个用户账户，推荐更改用户的vimrc文件（单用户配置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="variable">$HOME</span>/.vimrc</span><br></pre></td></tr></table></figure><p>详情查看参考文档：<a href="https://www.vim.org/docs.php">https://www.vim.org/docs.php</a><br />中文参考文档：<a href="https://vimcdoc.sourceforge.net">https://vimcdoc.sourceforge.net</a></p><p>我个人的配置文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&quot;启用gbk编码</span><br><span class="line">&quot;set fenc=gbk</span><br><span class="line">&quot;取消自动备份</span><br><span class="line">set nobackup</span><br><span class="line">set noundofile</span><br><span class="line">set noswapfile</span><br><span class="line">&quot;显示行号</span><br><span class="line">set number</span><br><span class="line">&quot;vim自动对齐，也就是把当前行的对齐格式应用到下一行</span><br><span class="line">set autoindent</span><br><span class="line">&quot;设置C风格的自动缩进</span><br><span class="line">set cindent shiftwidth=4</span><br><span class="line">set cinoptions+=&#123;2</span><br><span class="line">&quot;设置自动折叠</span><br><span class="line">set foldmethod=indent</span><br><span class="line">&quot;文本颜色显示</span><br><span class="line">syntax enable</span><br><span class="line">&quot;语法高亮显示</span><br><span class="line">syntax on</span><br><span class="line">&quot;根据上面对齐格式，智能选择对齐格式，类似C语言编程</span><br><span class="line">set smartindent</span><br><span class="line">&quot;设置&#x27;&gt;&#x27;操作符的缩进值为4，可使用&#x27;&gt;&gt;&#x27;为当前行提供缩进量</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot;设置tab按键为四个空格</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot;设置匹配模式，类似当输入一个左括号时会匹配一个右括号</span><br><span class="line">set showmatch</span><br><span class="line">&quot;高亮显示匹配项</span><br><span class="line">set hlsearch</span><br><span class="line">&quot;显示制表符</span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br><span class="line">&quot;设置中文帮助</span><br><span class="line">set helplang=cn</span><br><span class="line">&quot;限定行长至多80字符</span><br><span class="line">&quot;set textwidth=80</span><br><span class="line">&quot;窗口大小</span><br><span class="line">&quot;set lines=35 columns=140</span><br><span class="line">&quot;分割出来的窗口位于当前窗口下边/右边</span><br><span class="line">set splitbelow</span><br><span class="line">set splitright</span><br><span class="line">&quot;设置英文字体为Birsteam Vera Sans Mono</span><br><span class="line">set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI</span><br><span class="line">&quot;设置中文字体 幼圆</span><br><span class="line">set gfw=幼圆:h10:cGB2312</span><br><span class="line">&quot;使用深色背景色配色</span><br><span class="line">set background=dark</span><br><span class="line">&quot;设置主题为molokai</span><br><span class="line">colorscheme molokai</span><br><span class="line">let g:molokai_original = 1</span><br><span class="line">&quot;显示行尾空格</span><br><span class="line">highlight WhitespaceEOL ctermbg=red guibg=red</span><br><span class="line">match WhitespaceEol /\s\+$/</span><br><span class="line">&quot;启用自动缩进</span><br><span class="line">filetype indent on</span><br><span class="line">&quot;启用插件</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure><p>编辑完成后在vim中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>再次编辑vimrc看看配置有没有生效，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>你会看到<br /><img src="/images/vimusr/default.png" alt="The failed colorscheme" /></p><p>乍一看没什么问题，但是我43行设置的主题配色没有应用上！！</p><h4 id="安装主题配色"><a class="markdownIt-Anchor" href="#安装主题配色"></a> 安装主题配色</h4><p>查看一下vim的主题配色文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/vim/vim91/colors</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>这里的**/usr/share/vim<strong>是我的vim安装目录，具体查看在</strong>vim --version** 的[44行] (#安装目录)</p><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.             desert.vim    lists           quiet.vim     tools</span><br><span class="line">..            elflord.vim   lunaperche.vim  retrobox.vim  torte.vim</span><br><span class="line">blue.vim      evening.vim   morning.vim     ron.vim       wildcharm.vim</span><br><span class="line">darkblue.vim  habamax.vim   murphy.vim      shine.vim     zaibatsu.vim</span><br><span class="line">default.vim   industry.vim  pablo.vim       slate.vim     zellner.vim</span><br><span class="line">delek.vim     koehler.vim   peachpuff.vim   sorbet.vim</span><br></pre></td></tr></table></figure><p>哦～原来是我没有下载molokai.vim主题配色文件<br />到molokai配色的github仓库下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tomasr/molokai.git molokai</span><br></pre></td></tr></table></figure><p>进入刚刚clone下的文件目录里看看有什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> molokai</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.  ..  colors  .git  LICENSE.md  README.md</span><br></pre></td></tr></table></figure><p>进入colors目录看看有什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> colors</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.  ..  molokai.vim</span><br></pre></td></tr></table></figure><p>哦，终于找到你～现在，我们将他复制到vim的主题配色目录里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> molokai.vim /usr/shar/vim/vim91/colors/molokai.vim</span><br></pre></td></tr></table></figure><p>好，我们再回去编辑vimrc看看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><p>效果<br /><img src="/images/vimusr/molokai.png" alt="The successful colorscheme" /></p><p>真不错，如果要更改其他主题配色可以先修改vimrc里的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">colorscheme</span> molokai</span><br></pre></td></tr></table></figure><p>把molokai改成你喜欢的主题配色，如果没有就下载<strong>主题配色名字.vim</strong>文件到vim的color目录就可以修改啦。</p><h1 id="高效的编辑"><a class="markdownIt-Anchor" href="#高效的编辑"></a> 高效的编辑</h1><p>到这里vim的基本安装配置已经完成啦！！可以愉快的使用vim进行文件编辑了。而编辑过程中有一些小技巧，能够改善编写体验，持续更新中…</p><h2 id="移动"><a class="markdownIt-Anchor" href="#移动"></a> 移动</h2><p><code>$</code>会把光标移动到当前行尾。<br /><code>^</code>会把光标移动到一行的第一个非空字符。<br /><code>0</code>会把光标移动到一行的第一个字符。</p><h3 id="移动到指定字符"><a class="markdownIt-Anchor" href="#移动到指定字符"></a> 移动到指定字符</h3><p>单字符查找命令是最有用的移动命令之一。<code>f</code>和<code>F</code>(Find寻找）。<br />将光标移动到这一行第一个&quot;y&quot;上，可以输入<code>fy</code>，光标就会移动到第一个&quot;y&quot;上啦。<br />&quot;f&quot;是向右寻找，如果向左边寻找可以使用<code>F</code>命令。</p><h3 id="括号匹配"><a class="markdownIt-Anchor" href="#括号匹配"></a> 括号匹配</h3><p>例如现在光标在&quot;(“上，现在我要找到它匹配的”)&quot;，只需要按一下<code>%</code>光标就会跳转到匹配的括号上了。</p><h3 id="移动到指定行"><a class="markdownIt-Anchor" href="#移动到指定行"></a> 移动到指定行</h3><p>例如我要移动到33行，可以 <code>33G</code>(Go前往),光标就会移动到33行的第一个字符了。<br /><code>gg</code>可以移动到文件首部。<br /><code>G</code>可以移动到文件末。</p><h3 id="屏幕滚动"><a class="markdownIt-Anchor" href="#屏幕滚动"></a> 屏幕滚动</h3><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center"><code>CTRL-U</code></td><td style="text-align:left">命令向上滚动半屏。(Up向上)</td></tr><tr><td style="text-align:center"><code>CTRL-D</code></td><td style="text-align:left">命令向下滚动半屏。(Down向下)</td></tr><tr><td style="text-align:center"><code>CTRL-B</code></td><td style="text-align:left">命令向上滚动一整屏。(Backword向后)</td></tr><tr><td style="text-align:center"><code>CTRL-F</code></td><td style="text-align:left">命令向下滚动一整个屏幕。(Forward向前，文件的前方是下)</td></tr></tbody></table><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center"><code>zz</code></td><td style="text-align:left">将光标移动到屏幕中间。</td></tr><tr><td style="text-align:center"><code>zt</code></td><td style="text-align:left">将光标移动到屏幕顶部。(top顶部)</td></tr><tr><td style="text-align:center"><code>zb</code></td><td style="text-align:left">将光标移动到屏幕底部。(bottom底部)</td></tr></tbody></table><h3 id="使用标记"><a class="markdownIt-Anchor" href="#使用标记"></a> 使用标记</h3><p>当使用G跳到另一个地方时，想回到原来的位置。可以使用如下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;``&quot;</span></span><br></pre></td></tr></table></figure><ul><li>&quot;`“是反引号，用单引号”'&quot;也可以。</li><li>&quot;``&quot;可以在两个位置上跳来跳去。</li><li>&quot;CTRL-O&quot;则跳到一个&quot;较老&quot;的地方。(Older老的)</li><li>&quot;CTRL-I&quot;则跳到一个&quot;较新&quot;的地方。(常见的键盘布局上I在键盘上紧靠着O)</li></ul><h4 id="有名字的标记"><a class="markdownIt-Anchor" href="#有名字的标记"></a> 有名字的标记</h4><p><code>ma</code>用a标记当前光标位置，可以在文本中使用26个标记(a-z)。<br />要跳转到a标记位置命令是: “`a”(反引号加上一个标记)<br />而&quot;'a&quot;(单引号加上一个标记)会移动到标记所在行的行首。<br />可以使用如下命令获取所有标记列表：“:marks”</p><p>有一些特殊的标记</p><table><thead><tr><th style="text-align:center">Marks</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center">’</td><td style="text-align:left">跳转前的光标位置</td></tr><tr><td style="text-align:center">&quot;</td><td style="text-align:left">最后编辑的光标位置</td></tr><tr><td style="text-align:center">[</td><td style="text-align:left">最后修改的开始位置</td></tr><tr><td style="text-align:center">]</td><td style="text-align:left">最后修改的结束位置</td></tr></tbody></table><h5 id="离开与回来"><a class="markdownIt-Anchor" href="#离开与回来"></a> 离开与回来</h5><p>这里引用一下文档翻译版的原话:</p><hr /><p>重 返 VIM 中 断 处<br />你编辑一个文件到一半，但你得下班去度假了。你退出 Vim 就去享受你的人生，把你那些工作忘得干干净净。两个星期以后你启动 Vim，键入:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0</span></span><br></pre></td></tr></table></figure><p>你正好回到当初离开 Vim 的地方。所以你就把你的工作接着做下去。</p><p>你每次退出 Vim，它都创建一个标记。最后那个是 '0。原来那个 '0 所指的位置就成了 '1。而原来那个 '1 就成了 '2，依此类推。而原来的标记 '9 就没了。</p><p>要发现标记 '0 至 '9 指向何处， :marks 命令很有用。</p><hr /><h2 id="s替换命令"><a class="markdownIt-Anchor" href="#s替换命令"></a> <code>:s</code>(替换命令)</h2><p><code>:s</code>命令可以在连续的行中执行字符串替换。一般形式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[<span class="built_in">range</span>]s /form/<span class="keyword">to</span>/[flags]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Options</th><th style="text-align:left">Control</th></tr></thead><tbody><tr><td style="text-align:center">[range]</td><td style="text-align:left">替换范围&quot;%“(所有行)，“1,5”(1到5行)，”.,$&quot;(当前行到文件末),&quot;5&quot;第5行,甚至可以使用搜索模式</td></tr><tr><td style="text-align:center">[form]</td><td style="text-align:left">需要替换的字符串,</td></tr><tr><td style="text-align:center">[to]</td><td style="text-align:left">替换成目标字符串</td></tr><tr><td style="text-align:center">[flags]</td><td style="text-align:left">标志位&quot;g&quot;(global全局),“p”(print打印)命令执行会打印出最后一个被修改的行,“c”(confirm确认)每次替换会询问是否替换</td></tr></tbody></table><p>若使用&quot;c&quot;标志，有以下回答</p><table><thead><tr><th style="text-align:center">Options</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center">y</td><td style="text-align:left">Yes，是；执行替换</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">No，否；跳过</td></tr><tr><td style="text-align:center">a</td><td style="text-align:left">All，全部；对剩下的匹配点全部执行替换，不需要确认</td></tr><tr><td style="text-align:center">q</td><td style="text-align:left">Quit，退出；不再执行任何替换</td></tr><tr><td style="text-align:center">l</td><td style="text-align:left">Last，最后；替换完当前匹配点后退出</td></tr><tr><td style="text-align:center">^E</td><td style="text-align:left">CTRL-E，one line Extra，向上滚动一行</td></tr><tr><td style="text-align:center">^Y</td><td style="text-align:left">CTRL-Y，Yank one line,向下滚动一行</td></tr></tbody></table><h3 id="批量替换反斜杠"><a class="markdownIt-Anchor" href="#批量替换反斜杠"></a> 批量替换“反斜杠”</h3><p>在使用Windows的路径时&quot;C:\User\Desktop&quot;,在一些程序中会把反斜杠&quot;&quot;当成转义字符标志，导致错误。将&quot;&quot;替换成&quot;/&quot;，是一种解决办法，在vim中输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s @\\@/@g</span><br></pre></td></tr></table></figure><ul><li>这行命令使用<code>:s</code>替换命令</li><li>因为后续要替换&quot;/&quot;,所以使用@作为分隔符号</li><li>需要替换的字符&quot;&quot;，是转义字符的前缀，所以要表示反斜杠需要输入&quot;\&quot;。</li><li>输入要替换成的目标字符&quot;/&quot;。</li><li>最后输入&quot;g&quot;表示整行均要替换(global全局)。不输入&quot;g&quot;只会替换第一个&quot;&quot;。<br />输入完命令后回车，即可批量替换这一行的&quot;&quot;。</li></ul><h3 id="批量删除行尾空格"><a class="markdownIt-Anchor" href="#批量删除行尾空格"></a> 批量删除行尾空格</h3><p>在编辑过程中可能在某些行的末尾无意中打了不需要的空格，某些对空格管控严格的语言可能会发生未知的错误。使用如下命令批量删除行尾空格：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s /\s\+$//g</span><br></pre></td></tr></table></figure><p><code>%</code>表示命令作用于全部行，<code>\s</code>是空格的转义字符(space空格)，<code>\+$</code>表示行末($)前的一个或者多个(+)。</p><h3 id="range的各种范围写法"><a class="markdownIt-Anchor" href="#range的各种范围写法"></a> [range]的各种范围写法</h3><p>例如<code>:?^Begin?,/^End/s@int@char@g</code><br />用于替换行首为Begin和行首为End之间的行，将int替换为char。&quot;?“是向前查找，”/&quot;是向后查找。</p><h4 id="偏移加减号"><a class="markdownIt-Anchor" href="#偏移加减号"></a> 偏移(加减号)</h4><p>这个写法还是有问题的，如果End这一行有&quot;int&quot;，那么这个&quot;int&quot;也会被替换掉。如果你不想将它替换掉可以设置偏移，像这样：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^End/-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以用任意数值代替命令中的&quot;-1&quot;，例如要定位匹配点下的第二行，要这样：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^End/+<span class="number">2</span></span><br></pre></td></tr></table></figure><p>偏移量还可以用于其他范围指定符。看一下这个例子：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:.+<span class="number">3</span>,$-<span class="number">5</span></span><br></pre></td></tr></table></figure><p>这指定当前行下面第三行到文件末倒数第五行的范围。</p><h4 id="使用标记-2"><a class="markdownIt-Anchor" href="#使用标记-2"></a> 使用标记</h4><p>除了指定行号，(这需要记住并把它敲出来)，你还可以使用标记。<br />在前面的例子中，你可以用标记指出第三章的位置。例如，用 <code>mt</code> 标记开头，再用<code>mb</code> 标记结尾。然后你就可以用标记表示一个范围 (包括标记的那一行):</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="string">&#x27;t,&#x27;</span><span class="keyword">b</span></span><br></pre></td></tr></table></figure><h4 id="指定行数"><a class="markdownIt-Anchor" href="#指定行数"></a> 指定行数</h4><p>如果你知道要修改多少行，你可以先输入一个数值再输入冒号。例如，如果你输入<br />“5:”，你会得到:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:.,.+<span class="number">4</span></span><br></pre></td></tr></table></figure><p>现在你可以继续你的命令，这个命令将作用于当前行及其后 4 行。</p><h2 id="gglobal命令"><a class="markdownIt-Anchor" href="#gglobal命令"></a> <code>:g</code>(global命令)</h2><p><code>:global</code> 命令是 Vim 中一个更强大的命令 (之一)。它允许你找到一个匹配点并且在那里执行一个命令。它的一般形式是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[<span class="built_in">range</span>]<span class="keyword">global</span>/&#123;pattern&#125;/&#123;<span class="keyword">command</span>&#125;</span><br></pre></td></tr></table></figure><p>这有点像 <code>:substitute</code> 命令。只是它不替换文本，而是执行 {command} 指定的命令。</p><blockquote><p>备注 : global 中执行的命令只能是冒号命令。普通模式命令不能在这里使用。如果需要，可以使用 <code>:normal</code> 命令。</p></blockquote><p>假设你要把 “foobar” 修改为 “barfoo”，但只需要修改 C++ 风格的注释中的内容。这种 注释以 “//” 开头。所以可以使用如下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g+//+s/foobar/barfoo/g</span><br></pre></td></tr></table></figure><p>这个命令用 <code>:g</code> 开头，这是 <code>:global</code> 的缩写形式，就像 <code>:s</code> 是 <code>:substitute</code> 的缩写形式一样。然后是一个匹配模式，由于模式中包括正斜杠，我们用加号作分隔符，后面是一个把 “foobar” 替换成 “barfoo” 的替换命令。<br />全局命令的默认范围是整个文件，所以这个例子中没有指定范围。这一点与<code>:substitute</code> 是不同的。后者只作用于一行。<br />这个命令并非完美。因为 <code>//</code> 可能出现在一行的中间，但替换命令会把前后的匹配<br />点都替换了。<br />像 <code>substitute</code> 一样，这里也可以使用各种各样的匹配模式。</p><h2 id="记录与回放命令"><a class="markdownIt-Anchor" href="#记录与回放命令"></a> 记录与回放命令</h2><ol><li><code>q&#123;register&#125;</code> 命令启动一次击键记录，结果保存到 {register} 指定的寄存器中。寄存器名可以用 a 到 z 中任一个字母表示。</li><li>输入你的命令。</li><li>键入 q (后面不用跟任何字符) 命令结束记录。<br />现在，你可以用 <code>@&#123;register&#125;</code> 命令执行这个宏。</li></ol><p>例如有如下文件名列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stdio.h</span><br><span class="line">fcntl.h</span><br><span class="line">unistd.h</span><br><span class="line">stdlib.h</span><br></pre></td></tr></table></figure><p>你想把她变成这样:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fcntl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;unistd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>先移动到第一行，接着执行如下命令：</p><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center">qa</td><td style="text-align:left">启动记录，并使用寄存器 a</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">移到行首</td></tr><tr><td style="text-align:center">i#include &quot;<Esc></td><td style="text-align:left">在行首输入 #include &quot;</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">移到行末</td></tr><tr><td style="text-align:center">a&quot;<Esc></td><td style="text-align:left">在行末加上双引号 (&quot;)</td></tr><tr><td style="text-align:center">j</td><td style="text-align:left">移到下一行</td></tr><tr><td style="text-align:center">q</td><td style="text-align:left">结束记录</td></tr></tbody></table><p>现在，你已经完成一次复杂的修改了。你可以通过重复三次 <code>@a</code> 完成余下的修改。<br /><code>@a</code> 命令可以通过计数前缀修饰，使操作重复指定的次数。在本例中，你可以输入:<code>3@a</code></p><h3 id="使用寄存器"><a class="markdownIt-Anchor" href="#使用寄存器"></a> 使用寄存器</h3><p>用来记录操作的寄存器与你用来拷贝文本的寄存器是相同的。这允许你混合记录操作和其<br />它命令来操作这些寄存器。<br />假设你在寄存器 n 中记录了一些命令。当你通过 <code>@n</code> 执行这些命令时，你发现这<br />些命令有些问题。这时你可以重新录一次，但这样你可能还会犯其它错误。其实，你可以<br />使用如下窍门:</p><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:left">Mean</th></tr></thead><tbody><tr><td style="text-align:center">G</td><td style="text-align:left">移到行尾</td></tr><tr><td style="text-align:center">o<Esc></td><td style="text-align:left">建立一个空行</td></tr><tr><td style="text-align:center">&quot;np</td><td style="text-align:left">拷贝 n 寄存器中的文本，你的命令将被拷到整个文件的结尾</td></tr><tr><td style="text-align:center">{edits}</td><td style="text-align:left">像修改普通文本一样修改这些命令</td></tr><tr><td style="text-align:center">0</td><td style="text-align:left">回到行首</td></tr><tr><td style="text-align:center">&quot;ny$</td><td style="text-align:left">把正确的命令拷贝回 n 寄存器</td></tr><tr><td style="text-align:center">dd</td><td style="text-align:left">删除临时行</td></tr></tbody></table><p>现在你可以通过 <code>@n</code> 命令执行正确的命令序列了。(如果你记录的命令包括换行符，请调整上面例子中最后两行的操作来包括所有的行。)</p><h3 id="追加寄存器"><a class="markdownIt-Anchor" href="#追加寄存器"></a> 追加寄存器</h3><p>到此为止，我们一直使用小写的寄存器名。要附加命令到一个寄存器中，可以使用大写的寄存器名。</p><p>假设你在寄存器 c 中已经记录了一个修改一个单词的命令。它可以正常工作，但现在你需要附加一个搜索命令以便找到下一个单词来修改。这可以通过如下命令来完成:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qC/word<span class="symbol">&lt;Enter&gt;</span>q</span><br></pre></td></tr></table></figure><p>启动 <code>qC</code> 命令可以对 c 寄存器追加记录。由此可见，记录到一个大写寄存器表示附加命令到对应的小写寄存器。</p><p>这种方法在宏记录，拷贝和删除命令中都有效。例如，你需要把选择一些行到一个寄存器中，可以先这样拷贝第一行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;aY</span></span><br></pre></td></tr></table></figure><p>然后移到下一个要拷贝的地方，执行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;AY</span></span><br></pre></td></tr></table></figure><p>如此类推。这样在寄存器 a 中就会包括所有你要拷贝的所有行。</p><h3 id="查看当前使用过的寄存器"><a class="markdownIt-Anchor" href="#查看当前使用过的寄存器"></a> 查看当前使用过的寄存器</h3><p>在编写过程中，你可能使用了大量的寄存器，而且你删除的文本也会自动使用数字键0-9的寄存器。寄存器那么多，遗忘是很正常的。<br />要想知道你的寄存器里有什么，可以使用如下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">reg</span>[isters]</span><br></pre></td></tr></table></figure><p>这回在你当前窗口的下方再开一个窗口，显示当前使用过的寄存器详细信息列表。<br />真是前脚记录后脚遗忘者<s>比如我</s>的救星。</p><blockquote><p><strong>注:</strong> ”[]“里的内容用是可选项，例如你可以输入<code>:reg</code>也可以输入<code>:registers</code>,显示的效果是一样的。</p></blockquote><p>那我不想看到全部的寄存器信息，我只想看其中一个的怎么办？<br />根据其他命令的结构你可能已经猜到啦：<code>:reg a</code>可以查看寄存器&quot;a&quot;储存的内容，利用命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">reg</span>[isters] &#123;arg&#125;</span><br></pre></td></tr></table></figure><p>就可以查看指定寄存器的内容啦。</p><h2 id="格式化代码自动调整缩进"><a class="markdownIt-Anchor" href="#格式化代码自动调整缩进"></a> 格式化代码(自动调整缩进)</h2><h3 id="c风格文件缩进"><a class="markdownIt-Anchor" href="#c风格文件缩进"></a> C风格文件缩进</h3><p>合理的缩进会使程序更容易理解，<s>除非你想参加下一届《国际模糊C代码大赛》</s>，vim提供了多种方法来简化这项工作。要对C或者C风格（如Java或C++）的程序缩进，请设定’cindent’选项。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="built_in">cindent</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>shiftwidth可以指定下一级缩进空格数，4个空格效果很好。<s>缩进3个空格更为合适，但许多程序员不太习惯非2的幂次，所以我常常设置4个空格</s></p><p>自动缩进还能帮助你提前发现代码中的错误。比如当你输入了一个 ‘}’ 后，如果发现比预想中的缩进多，那可能缺少了一个 ‘}’。请用 “%” 命令查找与你输入的 ‘}’ 相匹配的’{'。</p><p>缺少 ‘)’ 和 ‘;’ 同样会引起额外的缩进。当你发现比预料中多空白时，最好检查一<br />下之前的代码。</p><p>当你的代码没有被正确地排版，或者你插入或删除了某些行时，你需要重新进行代码缩<br />进。操作符 “=” 能完成这项功能，最简单的格式是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==</span><br></pre></td></tr></table></figure><p>这会缩进当前行。像其它的操作符一样，有三种方式使用它。可视模式下，“=” 缩进选中的行。一个有用的文本对象是 “a{”。它会选中当前 {} 区。这样，要重新缩进光标所在代码块:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="keyword">a</span>&#123;</span><br></pre></td></tr></table></figure><p>你还可以重新缩进整个文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gg=G</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 但是，不要对已经手工缩进的文件使用此命令。自动缩进的确做得很好，但在某些情况下你也许确实需要手工缩进。</p></blockquote><h3 id="设定缩进风格"><a class="markdownIt-Anchor" href="#设定缩进风格"></a> 设定缩进风格</h3><p>不同的人有不同的缩进风格。在默认情况下，Vim 采用了 90% 的程序员都使用的一种方式并能很好地完成工作。但是，如果你想使用其它的风格，你可以通过 ‘cinoptions’ 选项来设定。</p><p>‘cinoptions’ 默认为空，Vim 会使用默认风格。你可以在你希望改变的地方添加相应<br />的项目。例如，要使大括号的缩进如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>请使用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> cinoptions+=&#123;<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="修正缩进"><a class="markdownIt-Anchor" href="#修正缩进"></a> 修正缩进</h3><p>当你设定了</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>在插入模式下可以利用&quot;CTRL-D&quot;和&quot;CTRL-T&quot;来减少和添加缩进。<br />在普通模式下可以使用&quot;&lt;&lt;“和”&gt;&gt;&quot;来减少和添加缩进。</p><h2 id="折叠"><a class="markdownIt-Anchor" href="#折叠"></a> 折叠</h2><p>折叠的好处是，通过把多行的一节折叠成带有折叠提示的一行，会使你更好地了解对文本的宏观结构。</p><h3 id="手动折叠"><a class="markdownIt-Anchor" href="#手动折叠"></a> 手动折叠</h3><p>这里引用一下文档翻译版:</p><hr /><p>试一试: 把光标置于某一段落内，并键入:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zfap</span><br></pre></td></tr></table></figure><p>你将会看到该段落被一行高亮的文本所代替。你已经创建了一个折叠了。 <code>zf</code> 是个操作符，而 <code>ap</code> 是一个文本对象。你可以将 <code>zf</code> 操作符跟任何一个移动命令联用，为所经之处的文本创建一个折叠。 <code>zf</code> 也能在可视模式下使用。若要再阅读那些文本，可以键入以下命令以打开该折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zo</span><br></pre></td></tr></table></figure><p>你还可以用以下命令再关闭该折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zc</span><br></pre></td></tr></table></figure><p>所有的折叠命令都以 <code>z</code> 开头。展开你的想像力，这个字母看起来就像一张折叠起来的纸的侧面。而 <code>z</code> 后面可用的字母，由于采用了帮助记忆方法选择，很容易记得住:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zf      F‑old creation (创建折叠)</span><br><span class="line">zo      O‑pen a fold (打开折叠)</span><br><span class="line">zc      C‑lose a fold (关闭折叠)</span><br></pre></td></tr></table></figure><p>折叠可以嵌套: 一个含有折叠的文本区可以被再次折叠。例如，你可以折叠本节内每一段落，然后折叠本章内所有的节。试试看。你将 注意 到，打开全章的折叠，会将节的折叠还原得跟以前一样，有些打开，而有些关闭。</p><p>假定你已经创建了若干折叠，而现在需要阅览全部文本。你可以移到每个折叠处，并键入<code>zo</code>。若要做得更快，可以用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zr</span><br></pre></td></tr></table></figure><p>这将减少 (R‑educe) 折叠。相反的操作是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zm</span><br></pre></td></tr></table></figure><p>这将折叠更多 (M‑ore)。你可以重复 <code>zr</code> 和 <code>zm</code> 来打开和关闭若干层嵌套的折叠。如果你有一个嵌套了好几层深的折叠，你可以用这个命令把它们全部打开:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zR</span><br></pre></td></tr></table></figure><p>这将减少折叠直至一个也不剩。而用下面这个命令你可以关闭所有的折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zM</span><br></pre></td></tr></table></figure><p>这将增加折叠，直至所有的折叠都关闭了。</p><hr /><h3 id="依缩进折叠"><a class="markdownIt-Anchor" href="#依缩进折叠"></a> 依缩进折叠</h3><p>引用原文翻译版的话:</p><hr /><p>使用 <code>zf</code> 来定义一个折叠很费事。如果你的文本依循一种结构，以较多的缩进表示较低<br />的层次，那么，你可以采用缩进折叠的方法。这将为每一系列有相同缩进的行创建一个折叠。缩进较多的行将成为嵌套的折叠。缩进折叠适用于许多编程语言。</p><p>我们来试试这个方法。先设定 ‘foldmethod’ 选项:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> foldmethod=<span class="built_in">indent</span></span><br></pre></td></tr></table></figure><p>然后你可以用 <code>zm</code> 和 <code>zr</code> 命令增加和减少折叠。</p><p>你可以用 <code>zn</code> 命令快速禁止折叠功能。然后 zN 恢复原来的折叠。 zi 切换于两者之间。</p><hr /><h2 id="分割窗口"><a class="markdownIt-Anchor" href="#分割窗口"></a> 分割窗口</h2><p>这在同时编辑多个文件时及其有用，例如你在编辑 one.c 文件。这时候你想把一些公用的函数声明和变量声明放在 one.h 文件里。这时你可以输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">split</span> one.h</span><br></pre></td></tr></table></figure><p>这个命令把屏幕分解成两个窗口（新打开的文件显示在下层窗口），并把光标置于上面的窗口中。</p><p>当然你也可以将同一个文件分割成两个窗口显示，只需要</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">split</span></span><br></pre></td></tr></table></figure><p>这可以让你不用在同一个文件的不同位置反复跳转。</p><p>CTRL‑W w 命令可以用于在窗口间跳转。如果你在上面的窗口，它会跳转到下面的窗口，如果你在下面的窗口，它会跳转到上面的窗口。(CTRL‑W CTRL‑W 可以完成相同的功能这是为了避免你有时按第二次的时候从 CTRL 键上缩手晚了。)</p><h3 id="关闭窗口"><a class="markdownIt-Anchor" href="#关闭窗口"></a> 关闭窗口</h3><p>你可以用一下命令关闭当前窗口：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">close</span></span><br></pre></td></tr></table></figure><p>实际上，任何退出编辑的命令都可以关闭窗口，像 <code>:quit</code> 和 <code>ZZ</code> 等。但 <code>:close</code> 可以避免你在剩下一个窗口的时候不小心退出 Vim 了。</p><h4 id="关闭所有其他窗口"><a class="markdownIt-Anchor" href="#关闭所有其他窗口"></a> 关闭所有其他窗口</h4><p>如果你已经打开了一整套窗口，但现在只想编辑其中一个，如下命令可以完成这个功能:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">only</span></span><br></pre></td></tr></table></figure><p>这个命令关闭除当前窗口外的所有窗口。如果要关闭的窗口中有一个没有存盘，Vim 会显示一个错误信息，并且那个窗口不会被关闭。</p><h3 id="改变窗口大小"><a class="markdownIt-Anchor" href="#改变窗口大小"></a> 改变窗口大小</h3><p>对于已经打开的窗口，你可以用有几种方法改变它的大小。如果你有鼠标，很简单: 把鼠标指针移到分割两个窗口的状态栏上，上下拖动即可。</p><p>要扩大窗口:</p><ul><li>CTRL‑W +</li></ul><p>要缩小窗口:</p><ul><li>CTRL‑W ‑</li></ul><p>这两个命令接受计数前缀用于指定扩大和缩小的行数。所以 <code>4 CTRL‑W +</code> 会使窗口增高4 行。</p><p>要把一个窗口设置为指定的高度，可以用这个命令:</p><ul><li>{height}CTRL‑W _</li></ul><p>就是先输入一个数值，然后输入 <code>CTRL‑W</code> 和一个下划线 (在美式英语键盘中就是 Shift加上 ‑)。</p><p>要把一个窗口扩展到尽可能大，可以使用无计数前缀的 <code>CTRL‑W _</code> 命令。</p><h3 id="垂直分割窗口"><a class="markdownIt-Anchor" href="#垂直分割窗口"></a> 垂直分割窗口</h3><p><code>:split</code> 命令在当前窗口的上面建立窗口。要在窗口左边打开新窗口，用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">vsplit</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">vsplit</span> two.<span class="keyword">c</span></span><br></pre></td></tr></table></figure><p>这个命令会在已经分割的窗口右侧分割一个新窗口，显示 two.c 文件。</p><blockquote><p><strong>编者的碎碎念:</strong> 先到这里，我也要先退出vim去享受我的人生啦，不定期更新…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建自己的博客笔记</title>
      <link href="/2023-10-01-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0.html"/>
      <url>/2023-10-01-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a class="markdownIt-Anchor" href="#package-version"></a> package version</h1><table><thead><tr><th style="text-align:center">package</th><th style="text-align:center">version</th></tr></thead><tbody><tr><td style="text-align:center">ubuntu</td><td style="text-align:center">24.04</td></tr><tr><td style="text-align:center">hexo</td><td style="text-align:center">7.1.1</td></tr><tr><td style="text-align:center">reimu</td><td style="text-align:center">0.1.1</td></tr></tbody></table><h1 id="hexo部署"><a class="markdownIt-Anchor" href="#hexo部署"></a> Hexo部署</h1><h2 id="什么是hexo"><a class="markdownIt-Anchor" href="#什么是hexo"></a> 什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用<a href="https://www.markdownguide.org/getting-started">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>根据<a href="https://hexo.io/zh-cn/docs">Hexo官方文档</a>,需要安装<a href="https://nodejs.org%22Node.js%22">Node.js</a>(且版本不能低于10.13),还需要安装<a href="https://git-scm.com%22Git%22">Git</a>方便管理上传至<a href="https://github.com">Github</a>的网页。</p><h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2><p>可以使用npm安装,终端输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后可以使用以下两种方式执行Hexo:</p><p>1.使用npx运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p>2.或者添加如下环境变量，可以直接使用<code>Hexo &lt;command&gt;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line">hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> <code>&lt;command&gt;</code>为Hexo命令，详情参考<a href="https://hexo.io/zh-cn/docs/commands">Hexo命令参考</a></p></blockquote><h2 id="搭建博客基本框架"><a class="markdownIt-Anchor" href="#搭建博客基本框架"></a> 搭建博客基本框架</h2><p>执行以下命令,安装基本框架:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;folder&gt;</code>为博客框架放置的位置，可以放置在一个文件夹内，如果没有指定<code>&lt;folder&gt;</code>,则会在当前目录下载框架<br />举个例子，放置在家目录的myblog(<em>$HOME/myblog</em>)文件夹中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="variable">$HOME</span>/myblog</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 如果提示权限不足，使用sudo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init <span class="variable">$HONE</span>/myblog</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/myblog</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><h2 id="配置hexo"><a class="markdownIt-Anchor" href="#配置hexo"></a> 配置HEXO</h2><p>在框架所在目录（如上$HOME/myblog）中的<code>_config.yml</code>, 为Hexo的配置文件，使用编辑器编辑，详情见<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官方文档</a></p><p>如果你也使用github作为博客部署的仓库，则需要修改如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;yourname&gt;.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 将<code>&lt;yourname&gt;</code>修改为你的github用户名</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 将repo修改为仓库所在链接<br />将branch修改为仓库的主分支<strong>master</strong>（某些时候为<strong>main</strong>，打开自己的仓库查看）</p></blockquote><p>1.安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.这时可以尝试生成站点文件推送至远程库，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 提示输入用户名与密码，用户名为github用户名，密码为<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">github的令牌</a>（某个版本之后不支持密码提交推送）</p></blockquote><p>提交完成后可以在<code>https://&lt;yourname&gt;.github.io</code>,查看当前博客页面</p><h2 id="hexo-server"><a class="markdownIt-Anchor" href="#hexo-server"></a> Hexo server</h2><p>提交更改至github需要谨慎，所以半成品可以使用hexo-server在本地查看博客</p><p>1.安装hexo-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>2.启动hexo-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>根据提示在<code>http://localhost:4000</code>（或<code>http://127.0.0.1:4000</code>等环回地址)，查看制作好的页面</p><h2 id="更换主题"><a class="markdownIt-Anchor" href="#更换主题"></a> 更换主题</h2><p>如果你不喜欢Hexo自带的landscape主题，可以自己编写主题，也可以到<a href="https://hexo.io/themes">Hexo的主题网站</a>寻找各大开发者自建的主题</p><p>找到心仪的主题后，将其下载到<code>themes</code>目录下，并以主题名命名文件夹<br />如果使用git下载，可以使用以下命令，详情前往<a href="https://git-scm.com/docs/git-clone/zh_HANS-CN">Git官方文档</a></p><blockquote><p><strong>注:</strong> 我目前使用主题的是<a href="https://github.com/D-Sketon/hexo-theme-reimu">reimu</a>,安装配置过程参考<a href="https://d-sketon.github.io/20230707/hexo-theme-reimu-guide">作者文档</a>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; themes/&lt;themename&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;url&gt;</code>为主题的github下载链接，<code>&lt;themename&gt;</code>为主题名称，具体可以参考各主题的官方文档。</p></blockquote><p>启用主题</p><p>修改Hexo博客根目录下的<code>_config.yml</code>,中<code>theme</code></p><blockquote><p><strong>注:</strong> 修改主题后可能会出现Hexo-server查看正常，上传github后主题样式不显示，具体原因暂时不知道，我更改一次主题后又能正常显示了，遇到此问题可以尝试。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">&lt;themename&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;themename&gt;</code>为主题名称。</p></blockquote><p>启用主题配置文件</p><p>在Hexo根目录创建<code>_config.&lt;themename&gt;.yml</code>文件，具体设置各有不同，根据主题的文档具体更改即可。</p><h2 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h2><p>参考<a href="https://hexo.io/zh-cn/docs/writing">Hexo官方文档</a></p><p>使用new命令创建文章的.md文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>[laydout]</code>为文章布局，默认为post，详情查看官方文档；<code>&lt;title&gt;</code>为文章标题。</p></blockquote><p>编写内容使用<strong>markdown</strong>语言,详情可参考<a href="https://www.markdownguide.org/basic-syntax">markdown官方文档</a>。根据Hexo官方文档还可使用别的语言编写，我暂时还不了解。</p><h2 id="上传github"><a class="markdownIt-Anchor" href="#上传github"></a> 上传github</h2><h3 id="设置git"><a class="markdownIt-Anchor" href="#设置git"></a> 设置git</h3><p>文章写好后上传至github，首先需要设置git的<a href="https://docs.github.com/zh/get-started/getting-started-with-git/setting-your-username-in-git">用户名</a>与<a href="https://docs.github.com/zh/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address">邮箱</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>可以通过下列命令查看用户名与邮箱是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>这里<strong>yourname</strong>输入你的github用户名，<strong>youremail</strong>输入你的github邮箱，<a href="#github%E9%82%AE%E7%AE%B1%E4%BF%9D%E5%AF%86">一些小问题</a></p><h3 id="使用hexo命令上传文章"><a class="markdownIt-Anchor" href="#使用hexo命令上传文章"></a> 使用Hexo命令上传文章</h3><p>写好的文章需要生成静态文件</p><p>1.清理上次生成的静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>2.生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或者hexo g</span></span><br></pre></td></tr></table></figure><p>3.上传github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 或者hexo d</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 提示输入用户名与密码，用户名为github用户名，密码为<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">github的令牌</a>（某个版本之后不支持密码提交推送）</p></blockquote><blockquote><p><strong>注:</strong> 一些小问题，<a href="#%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0">短期更新文章失效</a></p></blockquote><h2 id="问题汇总"><a class="markdownIt-Anchor" href="#问题汇总"></a> <strong>问题汇总:</strong></h2><h3 id="github邮箱保密"><a class="markdownIt-Anchor" href="#github邮箱保密"></a> github邮箱保密</h3><p>github默认开启邮箱保密，<a href="https://docs.github.com/zh/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address">详情</a>。请到自己github主页的邮箱设置查看自己的安全邮箱，邮箱示例<code>&lt;ID&gt;&lt;username&gt;@users.noreply.github.com</code></p><h3 id="更新文章"><a class="markdownIt-Anchor" href="#更新文章"></a> 更新文章</h3><p>短时间（一天内）修改一篇文章时，生成的静态文件.html名称不会发生改变，此时直接运行<a href="#%E4%BD%BF%E7%94%A8Hexo%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0">上述命令</a>不会更新文章</p><p>1.此时进入<code>.deploy_git</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .deploy_git</span><br></pre></td></tr></table></figure><p>2.使用<a href="https://git-scm.com/docs/git-remote/zh_HANS-CN">remote命令</a>，跟踪储存库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;locolmark&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;localmark&gt;</code>为本地标记，后面一般用标记代替长长的储存库链接；<code>&lt;url&gt;</code>为储存库链接。(<code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</code>,<strong>username</strong>为用户名)</p></blockquote><p>3.使用<a href="https://git-scm.com/docs/git-rm/zh_HANS-CN">git-rm命令</a>,删除要更新的文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;path&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;path&gt;</code>为要删除的文章所在路径</p></blockquote><p>4.使用<a href="https://git-scm.com/docs/git-commit/zh_HANS-CN">commit命令</a>，记录仓库修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git commit -m <span class="string">&quot;update&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<strong>update</strong>为提交信息。</p></blockquote><p>5.使用<a href="https://git-scm.com/docs/git-push/zh_HANS-CN">push命令</a>，上传更改到github。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;localmark&gt; master</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;localhost&gt;</code>为第二步使用的本地标记，代表储存库；<code>master</code>为分支名称（有的为main，上github查看一下)</p></blockquote><p>6.<a href="#%E4%BD%BF%E7%94%A8Hexo%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0">提交新文章更改</a>,即可。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
