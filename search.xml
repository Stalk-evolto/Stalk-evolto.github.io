<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js逆向学习笔记</title>
      <link href="/2024-09-05-Js%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/2024-09-05-Js%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于某些需要，学习Js逆向分析学习JavaScript。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习深度学习的一些小笔记</title>
      <link href="/2024-04-08-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%AC%94%E8%AE%B0.html"/>
      <url>/2024-04-08-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一些相关的库与框架"><a href="#一些相关的库与框架" class="headerlink" title="一些相关的库与框架"></a>一些相关的库与框架</h1><h2 id="计算机视觉-Computer-Vison-CV"><a href="#计算机视觉-Computer-Vison-CV" class="headerlink" title="计算机视觉 (Computer Vison, CV)"></a>计算机视觉 (Computer Vison, CV)</h2><p>OpenCV，一个开源的计算机视觉和机器学习软件库<br>:<a href="https://opencv.org/">https://opencv.org/</a></p><p>:文档地址:<a href="https://docs.opencv.org/4.9.0">https://docs.opencv.org/4.9.0</a></p><h2 id="自然语言处理-Natural-Language-Processing-NLP"><a href="#自然语言处理-Natural-Language-Processing-NLP" class="headerlink" title="自然语言处理 (Natural Language Processing, NLP)"></a>自然语言处理 (Natural Language Processing, NLP)</h2><p>Hugging Face Transformers，<br>:<a href="https://huggingface.co/docs/transformers/index">https://huggingface.co/docs/transformers/index</a></p><h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><p>Django是一个高级的Python Web框架，它鼓励快速开发和简洁、实用的设计。 由经验丰富的开发人员构建，它可以解决Web开发的许多麻烦，因此您可以专注于 在编写应用程序时无需重新发明轮子。它是免费和开源的。</p><p>:<a href="https://www.djangoproject.com/">https://www.djangoproject.com/</a></p><h2 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h2><p>Flask是一个轻量级的WSGI Web应用程序框架。它被设计使入门变得快速简单，并能够扩展到复杂的应用程序。它开始是一个简单的包装Werkzeug和Jinja，并已成为最受欢迎的Python网站之一，应用框架。</p><p>:<a href="https://flask.palletsprojects.com/en/3.0.x/">https://flask.palletsprojects.com/en/3.0.x/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用笔记</title>
      <link href="/2024-04-07-vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/2024-04-07-vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a href="#package-version" class="headerlink" title="package version"></a>package version</h1><table><thead><tr><th align="center">package</th><th align="left">version</th></tr></thead><tbody><tr><td align="center">ubuntu</td><td align="left">24.04</td></tr><tr><td align="center">vim</td><td align="left">9.1</td></tr></tbody></table><h1 id="vim安装与配置"><a href="#vim安装与配置" class="headerlink" title="vim安装与配置"></a>vim安装与配置</h1><h2 id="vim简介"><a href="#vim简介" class="headerlink" title="vim简介"></a>vim简介</h2><p>一个传统、看似繁琐，实际上很有趣的编辑器。<br>官网：<a href="https://www.vim.org/">https://www.vim.org</a></p><p>vim的官方文档编写得十分有趣，有时间推荐阅读。<br>官方文档(英文)： <a href="https://vimhelp.org/">https://vimhelp.org</a></p><p>如果你和我一样英文不太好，可以下载中文翻译文件。<br>中文帮助： <a href="https://vimcdoc.sourceforge.net/">https://vimcdoc.sourceforge.net</a><br>在此感谢vimcdoc项目的参与者们，让我们不用因为语言差异，而错过这个强大的工具。</p><blockquote><p><strong>注:</strong> 本文只是作者对vim帮助中常用技巧的总结，以及初步使用时的注意事项，以防遗忘。</p></blockquote><h2 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h2><p><strong>ubuntu</strong>系统可以通过<code>apt-get</code>命令快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p>此方式的默认安装路径为<code>/usr/share/vim</code></p><p>其他安装方式详情见：<a href="https://www.vim.org/download.php">https://www.vim.org/download.php</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>在终端输入<code>vimtutor</code>,即可进入简易教程。</p><h2 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h2><p>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version</span><br></pre></td></tr></table></figure><p>会得到以下结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">VIM - Vi IMproved 9.1 (2024 Jan 02, 编译于 Mar 31 2024 00:15:53)</span><br><span class="line">包含补丁: 1-16</span><br><span class="line">修改者 team+vim@tracker.debian.org</span><br><span class="line">编译者 team+vim@tracker.debian.org</span><br><span class="line">巨型版本 无图形界面。  可使用(+)与不可使用(-)的功能:</span><br><span class="line">+acl               +file_in_path      +mouse_urxvt       -tag_any_white</span><br><span class="line">+arabic            +find_in_path      +mouse_xterm       -tcl</span><br><span class="line">+autocmd           +<span class="built_in">float</span>             +multi_byte        +termguicolors</span><br><span class="line">+autochdir         +folding           +multi_lang        +terminal</span><br><span class="line">-autoservername    -footer            -mzscheme          +terminfo</span><br><span class="line">-balloon_eval      +fork()            +netbeans_intg     +termresponse</span><br><span class="line">+balloon_eval_term +gettext           +num64             +textobjects</span><br><span class="line">-browse            -hangul_input      +packages          +textprop</span><br><span class="line">++builtin_terms    +iconv             +path_extra        +timers</span><br><span class="line">+byte_offset       +insert_expand     -perl              +title</span><br><span class="line">+channel           +ipv6              +persistent_undo   -toolbar</span><br><span class="line">+cindent           +job               +popupwin          +user_commands</span><br><span class="line">-clientserver      +jumplist          +postscript        +vartabs</span><br><span class="line">-clipboard         +keymap            +printer           +vertsplit</span><br><span class="line">+cmdline_compl     +lambda            +profile           +vim9script</span><br><span class="line">+cmdline_hist      +langmap           -python            +viminfo</span><br><span class="line">+cmdline_info      +libcall           +python3           +virtualedit</span><br><span class="line">+comments          +linebreak         +quickfix          +visual</span><br><span class="line">+conceal           +lispindent        +reltime           +visualextra</span><br><span class="line">+cryptv            +listcmds          +rightleft         +vreplace</span><br><span class="line">+cscope            +localmap          -ruby              +wildignore</span><br><span class="line">+cursorbind        -lua               +scrollbind        +wildmenu</span><br><span class="line">+cursorshape       +menu              +signs             +windows</span><br><span class="line">+dialog_con        +mksession         +smartindent       +writebackup</span><br><span class="line">+diff              +modify_fname      +sodium            -X11</span><br><span class="line">+digraphs          +mouse             -sound             +xattr</span><br><span class="line">-dnd               -mouseshape        +spell             -xfontset</span><br><span class="line">-ebcdic            +mouse_dec         +startuptime       -xim</span><br><span class="line">+emacs_tags        +mouse_gpm         +statusline        -xpm</span><br><span class="line">+<span class="built_in">eval</span>              -mouse_jsbterm     -sun_workshop      -xsmp</span><br><span class="line">+ex_extra          +mouse_netterm     +syntax            -xterm_clipboard</span><br><span class="line">+extra_search      +mouse_sgr         +tag_binary        -xterm_save</span><br><span class="line">-farsi             -mouse_sysmouse    -tag_old_static</span><br><span class="line">     系统 vimrc 文件: <span class="string">&quot;/etc/vim/vimrc&quot;</span></span><br><span class="line">     用户 vimrc 文件: <span class="string">&quot;<span class="variable">$HOME</span>/.vimrc&quot;</span></span><br><span class="line"> 第二用户 vimrc 文件: <span class="string">&quot;~/.vim/vimrc&quot;</span></span><br><span class="line">      用户 exrc 文件: <span class="string">&quot;<span class="variable">$HOME</span>/.exrc&quot;</span></span><br><span class="line">       defaults 文件: <span class="string">&quot;<span class="variable">$VIMRUNTIME</span>/defaults.vim&quot;</span></span><br><span class="line">         <span class="variable">$VIM</span> 预设值: <span class="string">&quot;/usr/share/vim&quot;</span></span><br><span class="line">编译方式: gcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/vim-g8cgSd/vim-9.1.0016=. -flto=auto -ffat-lto-objects -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -fdebug-prefix-map=/build/vim-g8cgSd/vim-9.1.0016=/usr/src/vim-2:9.1.0016-1ubuntu7 -DSYS_VIMRC_FILE=\&quot;/etc/vim/vimrc\&quot; -DSYS_GVIMRC_FILE=\&quot;/etc/vim/gvimrc\&quot; -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">链接方式: gcc -Wl,-Bsymbolic-<span class="built_in">functions</span> -flto=auto -ffat-lto-objects -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim -lm -ltinfo -lselinux -lsodium -lacl -lattr -lgpm -L/usr/lib/python3.12/config-3.12-x86_64-linux-gnu -lpython3.12 -ldl -lm</span><br></pre></td></tr></table></figure><p><strong>39-101</strong>行可以看到系统和用户的vimrc文件所在路径</p><h4 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h4><p><strong>103</strong>行可以看到vim的安装目录，后续安装<a href="#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2">主题配色</a>时会用到</p><p>配置vim可以选择更改系统vimrc文件（全局配置），在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/vim/vimrc</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong> 每个用户都会使用这个配置文件设置的vim，如果这是你的个人电脑，只有你一个用户，可以配置这个文件。</p></blockquote><p>如果这台电脑不止你一个人使用，你只有其中一个用户账户，推荐更改用户的vimrc文件（单用户配置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="variable">$HOME</span>/.vimrc</span><br></pre></td></tr></table></figure><p>详情查看参考文档：<a href="https://www.vim.org/docs.php">https://www.vim.org/docs.php</a><br>中文参考文档：<a href="https://vimcdoc.sourceforge.net/">https://vimcdoc.sourceforge.net</a></p><p>我个人的配置文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&quot;启用gbk编码</span><br><span class="line">&quot;set fenc=gbk</span><br><span class="line">&quot;取消自动备份</span><br><span class="line">set nobackup</span><br><span class="line">set noundofile</span><br><span class="line">set noswapfile</span><br><span class="line">&quot;显示行号</span><br><span class="line">set number</span><br><span class="line">&quot;vim自动对齐，也就是把当前行的对齐格式应用到下一行</span><br><span class="line">set autoindent</span><br><span class="line">&quot;设置C风格的自动缩进</span><br><span class="line">set cindent shiftwidth=4</span><br><span class="line">set cinoptions+=&#123;2</span><br><span class="line">&quot;设置自动折叠</span><br><span class="line">set foldmethod=indent</span><br><span class="line">&quot;文本颜色显示</span><br><span class="line">syntax enable</span><br><span class="line">&quot;语法高亮显示</span><br><span class="line">syntax on</span><br><span class="line">&quot;根据上面对齐格式，智能选择对齐格式，类似C语言编程</span><br><span class="line">set smartindent</span><br><span class="line">&quot;设置&#x27;&gt;&#x27;操作符的缩进值为4，可使用&#x27;&gt;&gt;&#x27;为当前行提供缩进量</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot;设置tab按键为四个空格</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot;设置匹配模式，类似当输入一个左括号时会匹配一个右括号</span><br><span class="line">set showmatch</span><br><span class="line">&quot;高亮显示匹配项</span><br><span class="line">set hlsearch</span><br><span class="line">&quot;显示制表符</span><br><span class="line">set listchars=tab:&gt;-,trail:-</span><br><span class="line">&quot;设置中文帮助</span><br><span class="line">set helplang=cn</span><br><span class="line">&quot;限定行长至多80字符</span><br><span class="line">&quot;set textwidth=80</span><br><span class="line">&quot;窗口大小</span><br><span class="line">&quot;set lines=35 columns=140</span><br><span class="line">&quot;分割出来的窗口位于当前窗口下边/右边</span><br><span class="line">set splitbelow</span><br><span class="line">set splitright</span><br><span class="line">&quot;设置英文字体为Birsteam Vera Sans Mono</span><br><span class="line">set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI</span><br><span class="line">&quot;设置中文字体 幼圆</span><br><span class="line">set gfw=幼圆:h10:cGB2312</span><br><span class="line">&quot;使用深色背景色配色</span><br><span class="line">set background=dark</span><br><span class="line">&quot;设置主题为molokai</span><br><span class="line">colorscheme molokai</span><br><span class="line">let g:molokai_original = 1</span><br><span class="line">&quot;显示行尾空格</span><br><span class="line">highlight WhitespaceEOL ctermbg=red guibg=red</span><br><span class="line">match WhitespaceEol /\s\+$/</span><br><span class="line">&quot;启用自动缩进</span><br><span class="line">filetype indent on</span><br><span class="line">&quot;启用插件</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure><p>编辑完成后在vim中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>再次编辑vimrc看看配置有没有生效，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>你会看到<br><img src="/images/vimusr/default.png" alt="The failed colorscheme"></p><p>乍一看没什么问题，但是我43行设置的主题配色没有应用上！！</p><h4 id="安装主题配色"><a href="#安装主题配色" class="headerlink" title="安装主题配色"></a>安装主题配色</h4><p>查看一下vim的主题配色文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/vim/vim91/colors</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>这里的**&#x2F;usr&#x2F;share&#x2F;vim<strong>是我的vim安装目录，具体查看在</strong>vim –version** 的[44行] (#安装目录)</p><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.             desert.vim    lists           quiet.vim     tools</span><br><span class="line">..            elflord.vim   lunaperche.vim  retrobox.vim  torte.vim</span><br><span class="line">blue.vim      evening.vim   morning.vim     ron.vim       wildcharm.vim</span><br><span class="line">darkblue.vim  habamax.vim   murphy.vim      shine.vim     zaibatsu.vim</span><br><span class="line">default.vim   industry.vim  pablo.vim       slate.vim     zellner.vim</span><br><span class="line">delek.vim     koehler.vim   peachpuff.vim   sorbet.vim</span><br></pre></td></tr></table></figure><p>哦～原来是我没有下载molokai.vim主题配色文件<br>到molokai配色的github仓库下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tomasr/molokai.git molokai</span><br></pre></td></tr></table></figure><p>进入刚刚clone下的文件目录里看看有什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> molokai</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.  ..  colors  .git  LICENSE.md  README.md</span><br></pre></td></tr></table></figure><p>进入colors目录看看有什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> colors</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">.  ..  molokai.vim</span><br></pre></td></tr></table></figure><p>哦，终于找到你～现在，我们将他复制到vim的主题配色目录里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> molokai.vim /usr/shar/vim/vim91/colors/molokai.vim</span><br></pre></td></tr></table></figure><p>好，我们再回去编辑vimrc看看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><p>效果<br><img src="/images/vimusr/molokai.png" alt="The successful colorscheme"></p><p>真不错，如果要更改其他主题配色可以先修改vimrc里的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">colorscheme</span> molokai</span><br></pre></td></tr></table></figure><p>把molokai改成你喜欢的主题配色，如果没有就下载<strong>主题配色名字.vim</strong>文件到vim的color目录就可以修改啦。</p><h1 id="高效的编辑"><a href="#高效的编辑" class="headerlink" title="高效的编辑"></a>高效的编辑</h1><p>到这里vim的基本安装配置已经完成啦！！可以愉快的使用vim进行文件编辑了。而编辑过程中有一些小技巧，能够改善编写体验，持续更新中…</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>“$”会把光标移动到当前行尾。<br>“^”会把光标移动到一行的第一个非空字符。<br>“0”会把光标移动到一行的第一个字符。</p><h3 id="移动到指定字符"><a href="#移动到指定字符" class="headerlink" title="移动到指定字符"></a>移动到指定字符</h3><p>单字符查找命令是最有用的移动命令之一。”f”和”F”(Find寻找）。<br>将光标移动到这一行第一个”y”上，可以输入”fy”，光标就会移动到第一个”y”上啦。<br>“f”是向右寻找，如果向左边寻找可以使用”F”命令。</p><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>例如现在光标在”(“上，现在我要找到它匹配的”)”，只需要按一下”%”光标就会跳转到匹配的括号上了。</p><h3 id="移动到指定行"><a href="#移动到指定行" class="headerlink" title="移动到指定行"></a>移动到指定行</h3><p>例如我要移动到33行，可以按”33G”(Go前往),光标就会移动到33行的第一个字符了。<br>“gg”可以移动到文件首部。<br>“G”可以移动到文件末。</p><h3 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h3><table><thead><tr><th align="center">Command</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">“CTRL-U”</td><td align="left">命令向上滚动半屏。(Up向上)</td></tr><tr><td align="center">“CTRL-D”</td><td align="left">命令向下滚动半屏。(Down向下)</td></tr><tr><td align="center">“CTRL-B”</td><td align="left">命令向上滚动一整屏。(Backword向后)</td></tr><tr><td align="center">“CTRL-F”</td><td align="left">命令向下滚动一整个屏幕。(Forward向前，文件的前方是下)</td></tr></tbody></table><table><thead><tr><th align="center">Command</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">“zz”</td><td align="left">将光标移动到屏幕中间。</td></tr><tr><td align="center">“zt”</td><td align="left">将光标移动到屏幕顶部。(top顶部)</td></tr><tr><td align="center">“zb”</td><td align="left">将光标移动到屏幕底部。(bottom底部)</td></tr></tbody></table><h3 id="使用标记"><a href="#使用标记" class="headerlink" title="使用标记"></a>使用标记</h3><p>当使用G跳到另一个地方时，想回到原来的位置。可以使用如下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;``&quot;</span></span><br></pre></td></tr></table></figure><ul><li>“&#96;”是反引号，用单引号”‘“也可以。</li><li>“&#96;&#96;”可以在两个位置上跳来跳去。</li><li>“CTRL-O”则跳到一个”较老”的地方。(Older老的)</li><li>“CTRL-I”则跳到一个”较新”的地方。(常见的键盘布局上I在键盘上紧靠着O)</li></ul><h4 id="有名字的标记"><a href="#有名字的标记" class="headerlink" title="有名字的标记"></a>有名字的标记</h4><p>“ma”用a标记当前光标位置，可以在文本中使用26个标记(a-z)。<br>要跳转到a标记位置命令是:”&#96;a”(反引号加上一个标记)<br>而”‘a”(单引号加上一个标记)会移动到标记所在行的行首。<br>可以使用如下命令获取所有标记列表：”:marks”</p><p>有一些特殊的标记</p><table><thead><tr><th align="center">Marks</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">‘</td><td align="left">跳转前的光标位置</td></tr><tr><td align="center">“</td><td align="left">最后编辑的光标位置</td></tr><tr><td align="center">[</td><td align="left">最后修改的开始位置</td></tr><tr><td align="center">]</td><td align="left">最后修改的结束位置</td></tr></tbody></table><h5 id="离开与回来"><a href="#离开与回来" class="headerlink" title="离开与回来"></a>离开与回来</h5><p>这里引用一下文档翻译版的原话:</p><hr><p>重 返 VIM 中 断 处<br>你编辑一个文件到一半，但你得下班去度假了。你退出 Vim 就去享受你的人生，把你那些工作忘得干干净净。两个星期以后你启动 Vim，键入:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;0</span></span><br></pre></td></tr></table></figure><p>你正好回到当初离开 Vim 的地方。所以你就把你的工作接着做下去。</p><p>你每次退出 Vim，它都创建一个标记。最后那个是 ‘0。原来那个 ‘0 所指的位置就成了 ‘1。而原来那个 ‘1 就成了 ‘2，依此类推。而原来的标记 ‘9 就没了。</p><p>要发现标记 ‘0 至 ‘9 指向何处， :marks 命令很有用。</p><hr><h2 id="s-替换命令"><a href="#s-替换命令" class="headerlink" title=":s(替换命令)"></a>:s(替换命令)</h2><p>“:s”命令可以在连续的行中执行字符串替换。一般形式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[<span class="built_in">range</span>]s /form/<span class="keyword">to</span>/[flags]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Options</th><th align="left">Control</th></tr></thead><tbody><tr><td align="center">[range]</td><td align="left">替换范围”%”(所有行)，”1,5”(1到5行)，”.,$”(当前行到文件末),”5”第5行,甚至可以使用搜索模式</td></tr><tr><td align="center">[form]</td><td align="left">需要替换的字符串,</td></tr><tr><td align="center">[to]</td><td align="left">替换成目标字符串</td></tr><tr><td align="center">[flags]</td><td align="left">标志位”g”(global全局),”p”(print打印)命令执行会打印出最后一个被修改的行,”c”(confirm确认)每次替换会询问是否替换</td></tr></tbody></table><p>若使用”c”标志，有以下回答</p><table><thead><tr><th align="center">Options</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">“y”</td><td align="left">Yes，是；执行替换</td></tr><tr><td align="center">“n”</td><td align="left">No，否；跳过</td></tr><tr><td align="center">“a”</td><td align="left">All，全部；对剩下的匹配点全部执行替换，不需要确认</td></tr><tr><td align="center">“q”</td><td align="left">Quit，退出；不再执行任何替换</td></tr><tr><td align="center">“l”</td><td align="left">Last，最后；替换完当前匹配点后退出</td></tr><tr><td align="center">“^E”</td><td align="left">CTRL-E，one line Extra，向上滚动一行</td></tr><tr><td align="center">“^Y”</td><td align="left">CTRL-Y，Yank one line,向下滚动一行</td></tr></tbody></table><h3 id="批量替换“反斜杠”"><a href="#批量替换“反斜杠”" class="headerlink" title="批量替换“反斜杠”"></a>批量替换“反斜杠”</h3><p>在使用Windows的路径时”C:\User\Desktop”,在一些程序中会把反斜杠”&quot;当成转义字符标志，导致错误。将”&quot;替换成”&#x2F;“，是一种解决办法，在vim中输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s @\\@/@g</span><br></pre></td></tr></table></figure><ul><li>这行命令使用”:s”替换命令</li><li>因为后续要替换”&#x2F;“,所以使用@作为分隔符号</li><li>需要替换的字符”&quot;，是转义字符的前缀，所以要表示反斜杠需要输入”\“。</li><li>输入要替换成的目标字符”&#x2F;“。</li><li>最后输入”g”表示整行均要替换(global全局)。不输入”g”只会替换第一个”&quot;。<br>输入完命令后回车，即可批量替换这一行的”&quot;。</li></ul><h3 id="批量删除行尾空格"><a href="#批量删除行尾空格" class="headerlink" title="批量删除行尾空格"></a>批量删除行尾空格</h3><p>在编辑过程中可能在某些行的末尾无意中打了不需要的空格，某些对空格管控严格的语言可能会发生未知的错误。使用如下命令批量删除行尾空格：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s /\s\+$//g</span><br></pre></td></tr></table></figure><p>“%”表示命令作用于全部行，”\s”是空格的转义字符(space空格)，”+$”表示行末($)前的一个或者多个(+)。</p><h3 id="range-的各种范围写法"><a href="#range-的各种范围写法" class="headerlink" title="[range]的各种范围写法"></a>[range]的各种范围写法</h3><p>例如”:?^Begin?,&#x2F;^End&#x2F;s@int@char@g”<br>用于替换行首为Begin和行首为End之间的行，将int替换为char。”?”是向前查找，”&#x2F;“是向后查找。</p><h4 id="偏移-加减号"><a href="#偏移-加减号" class="headerlink" title="偏移(加减号)"></a>偏移(加减号)</h4><p>这个写法还是有问题的，如果End这一行有”int”，那么这个”int”也会被替换掉。如果你不想将它替换掉可以设置偏移，像这样：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^End/-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以用任意数值代替命令中的”-1”，例如要定位匹配点下的第二行，要这样：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^End/+<span class="number">2</span></span><br></pre></td></tr></table></figure><p>偏移量还可以用于其他范围指定符。看一下这个例子：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:.+<span class="number">3</span>,$-<span class="number">5</span></span><br></pre></td></tr></table></figure><p>这指定当前行下面第三行到文件末倒数第五行的范围。</p><h4 id="使用标记-1"><a href="#使用标记-1" class="headerlink" title="使用标记"></a>使用标记</h4><p>除了指定行号，(这需要记住并把它敲出来)，你还可以使用标记。<br>在前面的例子中，你可以用标记指出第三章的位置。例如，用 “mt” 标记开头，再用”mb” 标记结尾。然后你就可以用标记表示一个范围 (包括标记的那一行):</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="string">&#x27;t,&#x27;</span><span class="keyword">b</span></span><br></pre></td></tr></table></figure><h4 id="指定行数"><a href="#指定行数" class="headerlink" title="指定行数"></a>指定行数</h4><p>如果你知道要修改多少行，你可以先输入一个数值再输入冒号。例如，如果你输入<br>“5:”，你会得到:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:.,.+<span class="number">4</span></span><br></pre></td></tr></table></figure><p>现在你可以继续你的命令，这个命令将作用于当前行及其后 4 行。</p><h2 id="g-global命令"><a href="#g-global命令" class="headerlink" title=":g(global命令)"></a>:g(global命令)</h2><p>“:global” 命令是 Vim 中一个更强大的命令 (之一)。它允许你找到一个匹配点并且在那里执行一个命令。它的一般形式是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[<span class="built_in">range</span>]<span class="keyword">global</span>/&#123;pattern&#125;/&#123;<span class="keyword">command</span>&#125;</span><br></pre></td></tr></table></figure><p>这有点像 “:substitute” 命令。只是它不替换文本，而是执行 {command} 指定的命令。<br>备注 :<br>global 中执行的命令只能是冒号命令。普通模式命令不能在这里使用。如果需<br>要，可以使用 :normal 命令。<br>假设你要把 “foobar” 修改为 “barfoo”，但只需要修改 C++ 风格的注释中的内容。这种 注释以 “&#x2F;&#x2F;“ 开头。所以可以使用如下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g+//+s/foobar/barfoo/g</span><br></pre></td></tr></table></figure><p>这个命令用 “:g” 开头，这是 “:global” 的缩写形式，就像 “:s” 是 “:substitute” 的缩写形式一样。然后是一个匹配模式，由于模式中包括正斜杠，我们用加号作分隔符，后面是一个把 “foobar” 替换成 “barfoo” 的替换命令。<br>全局命令的默认范围是整个文件，所以这个例子中没有指定范围。这一点与”:substitute” 是不同的。后者只作用于一行。<br>这个命令并非完美。因为 “&#x2F;&#x2F;“ 可能出现在一行的中间，但替换命令会把前后的匹配<br>点都替换了。<br>像 “:substitute” 一样，这里也可以使用各种各样的匹配模式。</p><h2 id="记录与回放命令"><a href="#记录与回放命令" class="headerlink" title="记录与回放命令"></a>记录与回放命令</h2><ol><li>“q{register}” 命令启动一次击键记录，结果保存到 {register} 指定的寄存器中。寄存器名可以用 a 到 z 中任一个字母表示。</li><li>输入你的命令。</li><li>键入 q (后面不用跟任何字符) 命令结束记录。<br>现在，你可以用 “@{register}” 命令执行这个宏。</li></ol><p>例如有如下文件名列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stdio.h</span><br><span class="line">fcntl.h</span><br><span class="line">unistd.h</span><br><span class="line">stdlib.h</span><br></pre></td></tr></table></figure><p>你想把她变成这样:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fcntl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;unistd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>先移动到第一行，接着执行如下命令：</p><table><thead><tr><th align="center">Command</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">qa</td><td align="left">启动记录，并使用寄存器 a</td></tr><tr><td align="center">^</td><td align="left">移到行首</td></tr><tr><td align="center">i#include “<Esc></td><td align="left">在行首输入 #include “</td></tr><tr><td align="center">$</td><td align="left">移到行末</td></tr><tr><td align="center">a”<Esc></td><td align="left">在行末加上双引号 (“)</td></tr><tr><td align="center">j</td><td align="left">移到下一行</td></tr><tr><td align="center">q</td><td align="left">结束记录</td></tr></tbody></table><p>现在，你已经完成一次复杂的修改了。你可以通过重复三次 “@a” 完成余下的修改。<br>“@a” 命令可以通过计数前缀修饰，使操作重复指定的次数。在本例中，你可以输入:”3@a”</p><h3 id="使用寄存器"><a href="#使用寄存器" class="headerlink" title="使用寄存器"></a>使用寄存器</h3><p>用来记录操作的寄存器与你用来拷贝文本的寄存器是相同的。这允许你混合记录操作和其<br>它命令来操作这些寄存器。<br>假设你在寄存器 n 中记录了一些命令。当你通过 “@n” 执行这些命令时，你发现这<br>些命令有些问题。这时你可以重新录一次，但这样你可能还会犯其它错误。其实，你可以<br>使用如下窍门:</p><table><thead><tr><th align="center">Command</th><th align="left">Mean</th></tr></thead><tbody><tr><td align="center">G</td><td align="left">移到行尾</td></tr><tr><td align="center">o<Esc></td><td align="left">建立一个空行</td></tr><tr><td align="center">“np</td><td align="left">拷贝 n 寄存器中的文本，你的命令将被拷到整个文件的结尾</td></tr><tr><td align="center">{edits}</td><td align="left">像修改普通文本一样修改这些命令</td></tr><tr><td align="center">0</td><td align="left">回到行首</td></tr><tr><td align="center">“ny$</td><td align="left">把正确的命令拷贝回 n 寄存器</td></tr><tr><td align="center">dd</td><td align="left">删除临时行</td></tr></tbody></table><p>现在你可以通过 “@n” 命令执行正确的命令序列了。(如果你记录的命令包括换行符，请调整上面例子中最后两行的操作来包括所有的行。)</p><h3 id="追加寄存器"><a href="#追加寄存器" class="headerlink" title="追加寄存器"></a>追加寄存器</h3><p>到此为止，我们一直使用小写的寄存器名。要附加命令到一个寄存器中，可以使用大写的寄存器名。</p><p>假设你在寄存器 c 中已经记录了一个修改一个单词的命令。它可以正常工作，但现在你需要附加一个搜索命令以便找到下一个单词来修改。这可以通过如下命令来完成:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qC/word<span class="symbol">&lt;Enter&gt;</span>q</span><br></pre></td></tr></table></figure><p>启动 “qC” 命令可以对 c 寄存器追加记录。由此可见，记录到一个大写寄存器表示附加命令到对应的小写寄存器。</p><p>这种方法在宏记录，拷贝和删除命令中都有效。例如，你需要把选择一些行到一个寄存器中，可以先这样拷贝第一行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;aY</span></span><br></pre></td></tr></table></figure><p>然后移到下一个要拷贝的地方，执行:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;AY</span></span><br></pre></td></tr></table></figure><p>如此类推。这样在寄存器 a 中就会包括所有你要拷贝的所有行。</p><h2 id="格式化代码-自动调整缩进"><a href="#格式化代码-自动调整缩进" class="headerlink" title="格式化代码(自动调整缩进)"></a>格式化代码(自动调整缩进)</h2><h3 id="C风格文件缩进"><a href="#C风格文件缩进" class="headerlink" title="C风格文件缩进"></a>C风格文件缩进</h3><p>合理的缩进会使程序更容易理解，<del>除非你想参加下一届《国际模糊C代码大赛》</del>，vim提供了多种方法来简化这项工作。要对C或者C风格（如Java或C++）的程序缩进，请设定’cindent’选项。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="built_in">cindent</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>shiftwidth可以指定下一级缩进空格数，4个空格效果很好。<del>缩进3个空格更为合适，但许多程序员不太习惯非2的幂次，所以我常常设置4个空格</del></p><p>自动缩进还能帮助你提前发现代码中的错误。比如当你输入了一个 ‘}’ 后，如果发现比预想中的缩进多，那可能缺少了一个 ‘}’。请用 “%” 命令查找与你输入的 ‘}’ 相匹配的’{‘。</p><p>缺少 ‘)’ 和 ‘;’ 同样会引起额外的缩进。当你发现比预料中多空白时，最好检查一<br>下之前的代码。</p><p>当你的代码没有被正确地排版，或者你插入或删除了某些行时，你需要重新进行代码缩<br>进。操作符 “&#x3D;” 能完成这项功能，最简单的格式是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==</span><br></pre></td></tr></table></figure><p>这会缩进当前行。像其它的操作符一样，有三种方式使用它。可视模式下，”&#x3D;” 缩进选中的行。一个有用的文本对象是 “a{“。它会选中当前 {} 区。这样，要重新缩进光标所在代码块:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="keyword">a</span>&#123;</span><br></pre></td></tr></table></figure><p>你还可以重新缩进整个文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gg=G</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 但是，不要对已经手工缩进的文件使用此命令。自动缩进的确做得很好，但在某些情况下你也许确实需要手工缩进。</p></blockquote><h3 id="设定缩进风格"><a href="#设定缩进风格" class="headerlink" title="设定缩进风格"></a>设定缩进风格</h3><p>不同的人有不同的缩进风格。在默认情况下，Vim 采用了 90% 的程序员都使用的一种方式并能很好地完成工作。但是，如果你想使用其它的风格，你可以通过 ‘cinoptions’ 选项来设定。</p><p>‘cinoptions’ 默认为空，Vim 会使用默认风格。你可以在你希望改变的地方添加相应<br>的项目。例如，要使大括号的缩进如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>请使用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> cinoptions+=&#123;<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="修正缩进"><a href="#修正缩进" class="headerlink" title="修正缩进"></a>修正缩进</h3><p>当你设定了</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>在插入模式下可以利用”CTRL-D”和”CTRL-T”来减少和添加缩进。<br>在普通模式下可以使用”&lt;&lt;”和”&gt;&gt;”来减少和添加缩进。</p><h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p>折叠的好处是，通过把多行的一节折叠成带有折叠提示的一行，会使你更好地了解对文本的宏观结构。</p><h3 id="手动折叠"><a href="#手动折叠" class="headerlink" title="手动折叠"></a>手动折叠</h3><p>这里引用一下文档翻译版:</p><hr><p>试一试: 把光标置于某一段落内，并键入:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zfap</span><br></pre></td></tr></table></figure><p>你将会看到该段落被一行高亮的文本所代替。你已经创建了一个折叠了。 zf 是个操作符，而 ap 是一个文本对象。你可以将 zf 操作符跟任何一个移动命令联用，为所经之处的文本创建一个折叠。 zf 也能在可视模式下使用。若要再阅读那些文本，可以键入以下命令以打开该折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zo</span><br></pre></td></tr></table></figure><p>你还可以用以下命令再关闭该折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zc</span><br></pre></td></tr></table></figure><p>所有的折叠命令都以 ‘z’ 开头。展开你的想像力，这个字母看起来就像一张折叠起来的纸的侧面。而 “z” 后面可用的字母，由于采用了帮助记忆方法选择，很容易记得住:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zf      F‑old creation (创建折叠)</span><br><span class="line">zo      O‑pen a fold (打开折叠)</span><br><span class="line">zc      C‑lose a fold (关闭折叠)</span><br></pre></td></tr></table></figure><p>折叠可以嵌套: 一个含有折叠的文本区可以被再次折叠。例如，你可以折叠本节内每一段落，然后折叠本章内所有的节。试试看。你将 注意 到，打开全章的折叠，会将节的折叠还原得跟以前一样，有些打开，而有些关闭。</p><p>假定你已经创建了若干折叠，而现在需要阅览全部文本。你可以移到每个折叠处，并键入”zo”。若要做得更快，可以用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zr</span><br></pre></td></tr></table></figure><p>这将减少 (R‑educe) 折叠。相反的操作是:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zm</span><br></pre></td></tr></table></figure><p>这将折叠更多 (M‑ore)。你可以重复 “zr” 和 “zm” 来打开和关闭若干层嵌套的折叠。如果你有一个嵌套了好几层深的折叠，你可以用这个命令把它们全部打开:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zR</span><br></pre></td></tr></table></figure><p>这将减少折叠直至一个也不剩。而用下面这个命令你可以关闭所有的折叠:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zM</span><br></pre></td></tr></table></figure><p>这将增加折叠，直至所有的折叠都关闭了。</p><hr><h3 id="依缩进折叠"><a href="#依缩进折叠" class="headerlink" title="依缩进折叠"></a>依缩进折叠</h3><p>引用原文翻译版的话:</p><hr><p>使用 zf 来定义一个折叠很费事。如果你的文本依循一种结构，以较多的缩进表示较低<br>的层次，那么，你可以采用缩进折叠的方法。这将为每一系列有相同缩进的行创建一个折叠。缩进较多的行将成为嵌套的折叠。缩进折叠适用于许多编程语言。</p><p>我们来试试这个方法。先设定 ‘foldmethod’ 选项:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> foldmethod=<span class="built_in">indent</span></span><br></pre></td></tr></table></figure><p>然后你可以用 zm 和 zr 命令增加和减少折叠。</p><p>你可以用 zn 命令快速禁止折叠功能。然后 zN 恢复原来的折叠。 zi 切换于两者之间。</p><hr><h2 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h2><p>这在同时编辑多个文件时及其有用，例如你在编辑 one.c 文件。这时候你想把一些公用的函数声明和变量声明放在 one.h 文件里。这时你可以输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">split</span> one.h</span><br></pre></td></tr></table></figure><p>这个命令把屏幕分解成两个窗口（新打开的文件显示在下层窗口），并把光标置于上面的窗口中。</p><p>当然你也可以将同一个文件分割成两个窗口显示，只需要</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">split</span></span><br></pre></td></tr></table></figure><p>这可以让你不用在同一个文件的不同位置反复跳转。</p><p>CTRL‑W w 命令可以用于在窗口间跳转。如果你在上面的窗口，它会跳转到下面的窗口，如果你在下面的窗口，它会跳转到上面的窗口。(CTRL‑W CTRL‑W 可以完成相同的功能这是为了避免你有时按第二次的时候从 CTRL 键上缩手晚了。)</p><h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h3><p>你可以用一下命令关闭当前窗口：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">close</span></span><br></pre></td></tr></table></figure><p>实际上，任何退出编辑的命令都可以关闭窗口，像 “:quit” 和 “ZZ” 等。但 “close” 可以避免你在剩下一个窗口的时候不小心退出 Vim 了。</p><h4 id="关闭所有其他窗口"><a href="#关闭所有其他窗口" class="headerlink" title="关闭所有其他窗口"></a>关闭所有其他窗口</h4><p>如果你已经打开了一整套窗口，但现在只想编辑其中一个，如下命令可以完成这个功能:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">only</span></span><br></pre></td></tr></table></figure><p>这个命令关闭除当前窗口外的所有窗口。如果要关闭的窗口中有一个没有存盘，Vim 会显示一个错误信息，并且那个窗口不会被关闭。</p><h3 id="改变窗口大小"><a href="#改变窗口大小" class="headerlink" title="改变窗口大小"></a>改变窗口大小</h3><p>对于已经打开的窗口，你可以用有几种方法改变它的大小。如果你有鼠标，很简单: 把鼠标指针移到分割两个窗口的状态栏上，上下拖动即可。</p><p>要扩大窗口:</p><ul><li>CTRL‑W +</li></ul><p>要缩小窗口:</p><ul><li>CTRL‑W ‑</li></ul><p>这两个命令接受计数前缀用于指定扩大和缩小的行数。所以 “4 CTRL‑W +” 会使窗口增高4 行。</p><p>要把一个窗口设置为指定的高度，可以用这个命令:</p><ul><li>{height}CTRL‑W _</li></ul><p>就是先输入一个数值，然后输入 CTRL‑W 和一个下划线 (在美式英语键盘中就是 Shift加上 “‑”)。</p><p>要把一个窗口扩展到尽可能大，可以使用无计数前缀的 CTRL‑W _ 命令。</p><h3 id="垂直分割窗口"><a href="#垂直分割窗口" class="headerlink" title="垂直分割窗口"></a>垂直分割窗口</h3><p>“:split” 命令在当前窗口的上面建立窗口。要在窗口左边打开新窗口，用这个命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">vsplit</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">vsplit</span> two.<span class="keyword">c</span></span><br></pre></td></tr></table></figure><p>这个命令会在已经分割的窗口右侧分割一个新窗口，显示 two.c 文件。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建自己的博客笔记</title>
      <link href="/2023-10-01-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0.html"/>
      <url>/2023-10-01-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="package-version"><a href="#package-version" class="headerlink" title="package version"></a>package version</h1><table><thead><tr><th align="center">package</th><th align="center">version</th></tr></thead><tbody><tr><td align="center">ubuntu</td><td align="center">24.04</td></tr><tr><td align="center">hexo</td><td align="center">7.1.1</td></tr><tr><td align="center">reimu</td><td align="center">0.1.1</td></tr></tbody></table><h1 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用<a href="https://www.markdownguide.org/getting-started">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>根据<a href="https://hexo.io/zh-cn/docs">Hexo官方文档</a>,需要安装<a href="https://nodejs.org"node.js"/">Node.js</a>(且版本不能低于10.13),还需要安装<a href="https://git-scm.com"git"/">Git</a>方便管理上传至<a href="https://github.com/">Github</a>的网页。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>可以使用npm安装,终端输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后可以使用以下两种方式执行Hexo:</p><p>1.使用npx运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p>2.或者添加如下环境变量，可以直接使用<code>Hexo &lt;command&gt;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line">hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> <code>&lt;command&gt;</code>为Hexo命令，详情参考<a href="https://hexo.io/zh-cn/docs/commands">Hexo命令参考</a></p></blockquote><h2 id="搭建博客基本框架"><a href="#搭建博客基本框架" class="headerlink" title="搭建博客基本框架"></a>搭建博客基本框架</h2><p>执行以下命令,安装基本框架:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;folder&gt;</code>为博客框架放置的位置，可以放置在一个文件夹内，如果没有指定<code>&lt;folder&gt;</code>,则会在当前目录下载框架<br>举个例子，放置在家目录的myblog(<em>$HOME&#x2F;myblog</em>)文件夹中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="variable">$HOME</span>/myblog</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 如果提示权限不足，使用sudo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init <span class="variable">$HONE</span>/myblog</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/myblog</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><h2 id="配置HEXO"><a href="#配置HEXO" class="headerlink" title="配置HEXO"></a>配置HEXO</h2><p>在框架所在目录（如上$HOME&#x2F;myblog）中的<code>_config.yml</code>, 为Hexo的配置文件，使用编辑器编辑，详情见<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官方文档</a></p><p>如果你也使用github作为博客部署的仓库，则需要修改如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;yourname&gt;.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 将<code>&lt;yourname&gt;</code>修改为你的github用户名</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 将repo修改为仓库所在链接<br>将branch修改为仓库的主分支<strong>master</strong>（某些时候为<strong>main</strong>，打开自己的仓库查看）</p></blockquote><p>1.安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.这时可以尝试生成站点文件推送至远程库，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 提示输入用户名与密码，用户名为github用户名，密码为<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">github的令牌</a>（某个版本之后不支持密码提交推送）</p></blockquote><p>提交完成后可以在<code>https://&lt;yourname&gt;.github.io</code>,查看当前博客页面</p><h2 id="Hexo-server"><a href="#Hexo-server" class="headerlink" title="Hexo server"></a>Hexo server</h2><p>提交更改至github需要谨慎，所以半成品可以使用hexo-server在本地查看博客</p><p>1.安装hexo-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>2.启动hexo-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>根据提示在<code>http://localhost:4000</code>（或<code>http://127.0.0.1:4000</code>等环回地址)，查看制作好的页面</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如果你不喜欢Hexo自带的landscape主题，可以自己编写主题，也可以到<a href="https://hexo.io/themes">Hexo的主题网站</a>寻找各大开发者自建的主题</p><p>找到心仪的主题后，将其下载到<code>themes</code>目录下，并以主题名命名文件夹<br>如果使用git下载，可以使用以下命令，详情前往<a href="https://git-scm.com/docs/git-clone/zh_HANS-CN">Git官方文档</a></p><blockquote><p><strong>注:</strong> 我目前使用主题的是<a href="https://github.com/D-Sketon/hexo-theme-reimu">reimu</a>,安装配置过程参考<a href="https://d-sketon.github.io/20230707/hexo-theme-reimu-guide">作者文档</a>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; themes/&lt;themename&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;url&gt;</code>为主题的github下载链接，<code>&lt;themename&gt;</code>为主题名称，具体可以参考各主题的官方文档。</p></blockquote><p>启用主题</p><p>修改Hexo博客根目录下的<code>_config.yml</code>,中<code>theme</code></p><blockquote><p><strong>注:</strong> 修改主题后可能会出现Hexo-server查看正常，上传github后主题样式不显示，具体原因暂时不知道，我更改一次主题后又能正常显示了，遇到此问题可以尝试。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">&lt;themename&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;themename&gt;</code>为主题名称。</p></blockquote><p>启用主题配置文件</p><p>在Hexo根目录创建<code>_config.&lt;themename&gt;.yml</code>文件，具体设置各有不同，根据主题的文档具体更改即可。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>参考<a href="https://hexo.io/zh-cn/docs/writing">Hexo官方文档</a></p><p>使用new命令创建文章的.md文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>[laydout]</code>为文章布局，默认为post，详情查看官方文档；<code>&lt;title&gt;</code>为文章标题。</p></blockquote><p>编写内容使用<strong>markdown</strong>语言,详情可参考<a href="https://www.markdownguide.org/basic-syntax">markdown官方文档</a>。根据Hexo官方文档还可使用别的语言编写，我暂时还不了解。</p><h2 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h2><h3 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h3><p>文章写好后上传至github，首先需要设置git的<a href="https://docs.github.com/zh/get-started/getting-started-with-git/setting-your-username-in-git">用户名</a>与<a href="https://docs.github.com/zh/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address">邮箱</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>可以通过下列命令查看用户名与邮箱是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>这里<strong>yourname</strong>输入你的github用户名，<strong>youremail</strong>输入你的github邮箱，<a href="#github%E9%82%AE%E7%AE%B1%E4%BF%9D%E5%AF%86">一些小问题</a></p><h3 id="使用Hexo命令上传文章"><a href="#使用Hexo命令上传文章" class="headerlink" title="使用Hexo命令上传文章"></a>使用Hexo命令上传文章</h3><p>写好的文章需要生成静态文件</p><p>1.清理上次生成的静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>2.生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或者hexo g</span></span><br></pre></td></tr></table></figure><p>3.上传github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 或者hexo d</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 提示输入用户名与密码，用户名为github用户名，密码为<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">github的令牌</a>（某个版本之后不支持密码提交推送）</p></blockquote><blockquote><p><strong>注:</strong> 一些小问题，<a href="#%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0">短期更新文章失效</a></p></blockquote><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总:"></a><strong>问题汇总:</strong></h2><h3 id="github邮箱保密"><a href="#github邮箱保密" class="headerlink" title="github邮箱保密"></a>github邮箱保密</h3><p>github默认开启邮箱保密，<a href="https://docs.github.com/zh/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address">详情</a>。请到自己github主页的邮箱设置查看自己的安全邮箱，邮箱示例<code>&lt;ID&gt;&lt;username&gt;@users.noreply.github.com</code></p><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><p>短时间（一天内）修改一篇文章时，生成的静态文件.html名称不会发生改变，此时直接运行<a href="#%E4%BD%BF%E7%94%A8Hexo%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0">上述命令</a>不会更新文章</p><p>1.此时进入<code>.deploy_git</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .deploy_git</span><br></pre></td></tr></table></figure><p>2.使用<a href="https://git-scm.com/docs/git-remote/zh_HANS-CN">remote命令</a>，跟踪储存库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;locolmark&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;localmark&gt;</code>为本地标记，后面一般用标记代替长长的储存库链接；<code>&lt;url&gt;</code>为储存库链接。(<code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</code>,<strong>username</strong>为用户名)</p></blockquote><p>3.使用<a href="https://git-scm.com/docs/git-rm/zh_HANS-CN">git-rm命令</a>,删除要更新的文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;path&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;path&gt;</code>为要删除的文章所在路径</p></blockquote><p>4.使用<a href="https://git-scm.com/docs/git-commit/zh_HANS-CN">commit命令</a>，记录仓库修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git commit -m <span class="string">&quot;update&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<strong>update</strong>为提交信息。</p></blockquote><p>5.使用<a href="https://git-scm.com/docs/git-push/zh_HANS-CN">push命令</a>，上传更改到github。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;localmark&gt; master</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong> 其中<code>&lt;localhost&gt;</code>为第二步使用的本地标记，代表储存库；<code>master</code>为分支名称（有的为main，上github查看一下)</p></blockquote><p>6.<a href="#%E4%BD%BF%E7%94%A8Hexo%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0">提交新文章更改</a>,即可。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
